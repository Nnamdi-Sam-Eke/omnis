{"version":3,"file":"static/js/764.67b7955c.chunk.js","mappings":"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","sources":["../node_modules/date-fns/constants.js","../node_modules/date-fns/constructFrom.js","../node_modules/date-fns/toDate.js","../node_modules/date-fns/locale/en-US/_lib/formatDistance.js","../node_modules/date-fns/locale/_lib/buildFormatLongFn.js","../node_modules/date-fns/locale/en-US/_lib/formatLong.js","../node_modules/date-fns/locale/en-US/_lib/formatRelative.js","../node_modules/date-fns/locale/_lib/buildLocalizeFn.js","../node_modules/date-fns/locale/_lib/buildMatchFn.js","../node_modules/date-fns/locale/_lib/buildMatchPatternFn.js","../node_modules/date-fns/locale/en-US.js","../node_modules/date-fns/locale/en-US/_lib/localize.js","../node_modules/date-fns/locale/en-US/_lib/match.js","../node_modules/date-fns/_lib/format/longFormatters.js","../node_modules/date-fns/_lib/protectedTokens.js","../node_modules/date-fns/_lib/defaultOptions.js","../node_modules/date-fns/getDefaultOptions.js","../node_modules/date-fns/transpose.js","../node_modules/date-fns/parse/_lib/Setter.js","../node_modules/date-fns/parse/_lib/Parser.js","../node_modules/date-fns/parse/_lib/constants.js","../node_modules/date-fns/parse/_lib/utils.js","../node_modules/date-fns/startOfWeek.js","../node_modules/date-fns/getWeekYear.js","../node_modules/date-fns/startOfISOWeek.js","../node_modules/date-fns/startOfWeekYear.js","../node_modules/date-fns/getWeek.js","../node_modules/date-fns/setWeek.js","../node_modules/date-fns/getISOWeekYear.js","../node_modules/date-fns/startOfISOWeekYear.js","../node_modules/date-fns/getISOWeek.js","../node_modules/date-fns/setISOWeek.js","../node_modules/date-fns/parse/_lib/parsers/DateParser.js","../node_modules/date-fns/addDays.js","../node_modules/date-fns/setDay.js","../node_modules/date-fns/getISODay.js","../node_modules/date-fns/setISODay.js","../node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js","../node_modules/date-fns/parse/_lib/parsers.js","../node_modules/date-fns/parse/_lib/parsers/EraParser.js","../node_modules/date-fns/parse/_lib/parsers/YearParser.js","../node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.js","../node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.js","../node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.js","../node_modules/date-fns/parse/_lib/parsers/QuarterParser.js","../node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.js","../node_modules/date-fns/parse/_lib/parsers/MonthParser.js","../node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.js","../node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.js","../node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.js","../node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.js","../node_modules/date-fns/parse/_lib/parsers/DayParser.js","../node_modules/date-fns/parse/_lib/parsers/LocalDayParser.js","../node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.js","../node_modules/date-fns/parse/_lib/parsers/ISODayParser.js","../node_modules/date-fns/parse/_lib/parsers/AMPMParser.js","../node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.js","../node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.js","../node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.js","../node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.js","../node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.js","../node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.js","../node_modules/date-fns/parse/_lib/parsers/MinuteParser.js","../node_modules/date-fns/parse/_lib/parsers/SecondParser.js","../node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.js","../node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.js","../node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.js","../node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.js","../node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.js","../node_modules/date-fns/parse.js","../node_modules/date-fns/parseISO.js","../node_modules/date-fns/isDate.js","../node_modules/date-fns/isValid.js","../node_modules/date-fns/_lib/normalizeDates.js","../node_modules/date-fns/startOfDay.js","../node_modules/date-fns/differenceInCalendarDays.js","../node_modules/date-fns/startOfYear.js","../node_modules/date-fns/getDayOfYear.js","../node_modules/date-fns/_lib/addLeadingZeros.js","../node_modules/date-fns/_lib/format/lightFormatters.js","../node_modules/date-fns/_lib/format/formatters.js","../node_modules/date-fns/format.js","../node_modules/date-fns/addMilliseconds.js","../node_modules/date-fns/addSeconds.js","../node_modules/date-fns/addMinutes.js","../node_modules/date-fns/addHours.js","../node_modules/date-fns/addWeeks.js","../node_modules/date-fns/addMonths.js","../node_modules/date-fns/addQuarters.js","../node_modules/date-fns/addYears.js","../node_modules/date-fns/differenceInMilliseconds.js","../node_modules/date-fns/_lib/getRoundingMethod.js","../node_modules/date-fns/differenceInSeconds.js","../node_modules/date-fns/differenceInMinutes.js","../node_modules/date-fns/differenceInHours.js","../node_modules/date-fns/differenceInDays.js","../node_modules/date-fns/differenceInWeeks.js","../node_modules/date-fns/compareAsc.js","../node_modules/date-fns/differenceInCalendarMonths.js","../node_modules/date-fns/endOfDay.js","../node_modules/date-fns/endOfMonth.js","../node_modules/date-fns/isLastDayOfMonth.js","../node_modules/date-fns/differenceInMonths.js","../node_modules/date-fns/differenceInQuarters.js","../node_modules/date-fns/differenceInCalendarYears.js","../node_modules/date-fns/differenceInYears.js","../node_modules/date-fns/startOfSecond.js","../node_modules/date-fns/startOfMinute.js","../node_modules/date-fns/startOfHour.js","../node_modules/date-fns/startOfMonth.js","../node_modules/date-fns/startOfQuarter.js","../node_modules/date-fns/endOfSecond.js","../node_modules/date-fns/endOfMinute.js","../node_modules/date-fns/endOfHour.js","../node_modules/date-fns/endOfWeek.js","../node_modules/date-fns/endOfQuarter.js","../node_modules/date-fns/endOfYear.js","../node_modules/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.esm.js","../node_modules/react-chartjs-2/src/utils.ts","../node_modules/react-chartjs-2/src/chart.tsx","../node_modules/react-chartjs-2/src/typedCharts.tsx"],"sourcesContent":["/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n","import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // [TODO] -- I challenge you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // [TODO] -- I challenge you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // [TODO] I challenge you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","import { formatDistance } from \"./en-US/_lib/formatDistance.js\";\nimport { formatLong } from \"./en-US/_lib/formatLong.js\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.js\";\nimport { localize } from \"./en-US/_lib/localize.js\";\nimport { match } from \"./en-US/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","import { getDefaultOptions as getInternalDefaultOptions } from \"./_lib/defaultOptions.js\";\n\n/**\n * @name getDefaultOptions\n * @category Common Helpers\n * @summary Get default options.\n * @pure false\n *\n * @description\n * Returns an object that contains defaults for\n * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`\n * arguments for all functions.\n *\n * You can change these with [setDefaultOptions](https://date-fns.org/docs/setDefaultOptions).\n *\n * @returns The default options\n *\n * @example\n * const result = getDefaultOptions()\n * //=> {}\n *\n * @example\n * setDefaultOptions({ weekStarsOn: 1, firstWeekContainsDate: 4 })\n * const result = getDefaultOptions()\n * //=> { weekStarsOn: 1, firstWeekContainsDate: 4 }\n */\nexport function getDefaultOptions() {\n  return Object.assign({}, getInternalDefaultOptions());\n}\n\n// Fallback for modularized imports:\nexport default getDefaultOptions;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name transpose\n * @category Generic Helpers\n * @summary Transpose the date to the given constructor.\n *\n * @description\n * The function transposes the date to the given constructor. It helps you\n * to transpose the date in the system time zone to say `UTCDate` or any other\n * date extension.\n *\n * @typeParam InputDate - The input `Date` type derived from the passed argument.\n * @typeParam ResultDate - The result `Date` type derived from the passed constructor.\n *\n * @param date - The date to use values from\n * @param constructor - The date constructor to use\n *\n * @returns Date transposed to the given constructor\n *\n * @example\n * // Create July 10, 2022 00:00 in locale time zone\n * const date = new Date(2022, 6, 10)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0800 (Singapore Standard Time)'\n *\n * @example\n * // Transpose the date to July 10, 2022 00:00 in UTC\n * transpose(date, UTCDate)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)'\n */\nexport function transpose(date, constructor) {\n  const date_ = isConstructor(constructor)\n    ? new constructor(0)\n    : constructFrom(constructor, 0);\n  date_.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n  date_.setHours(\n    date.getHours(),\n    date.getMinutes(),\n    date.getSeconds(),\n    date.getMilliseconds(),\n  );\n  return date_;\n}\n\nfunction isConstructor(constructor) {\n  return (\n    typeof constructor === \"function\" &&\n    constructor.prototype?.constructor === constructor\n  );\n}\n\n// Fallback for modularized imports:\nexport default transpose;\n","import { constructFrom } from \"../../constructFrom.js\";\nimport { transpose } from \"../../transpose.js\";\n\nconst TIMEZONE_UNIT_PRIORITY = 10;\n\nexport class Setter {\n  subPriority = 0;\n\n  validate(_utcDate, _options) {\n    return true;\n  }\n}\n\nexport class ValueSetter extends Setter {\n  constructor(\n    value,\n\n    validateValue,\n\n    setValue,\n\n    priority,\n    subPriority,\n  ) {\n    super();\n    this.value = value;\n    this.validateValue = validateValue;\n    this.setValue = setValue;\n    this.priority = priority;\n    if (subPriority) {\n      this.subPriority = subPriority;\n    }\n  }\n\n  validate(date, options) {\n    return this.validateValue(date, this.value, options);\n  }\n\n  set(date, flags, options) {\n    return this.setValue(date, flags, this.value, options);\n  }\n}\n\nexport class DateTimezoneSetter extends Setter {\n  priority = TIMEZONE_UNIT_PRIORITY;\n  subPriority = -1;\n\n  constructor(context, reference) {\n    super();\n    this.context = context || ((date) => constructFrom(reference, date));\n  }\n\n  set(date, flags) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(date, transpose(date, this.context));\n  }\n}\n","import { ValueSetter } from \"./Setter.js\";\n\nexport class Parser {\n  run(dateString, token, match, options) {\n    const result = this.parse(dateString, token, match, options);\n    if (!result) {\n      return null;\n    }\n\n    return {\n      setter: new ValueSetter(\n        result.value,\n        this.validate,\n        this.set,\n        this.priority,\n        this.subPriority,\n      ),\n      rest: result.rest,\n    };\n  }\n\n  validate(_utcDate, _value, _options) {\n    return true;\n  }\n}\n","export const numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/, // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/, // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/, // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/, // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/, // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/, // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/, // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/, // 0 to 12\n  minute: /^[0-5]?\\d/, // 0 to 59\n  second: /^[0-5]?\\d/, // 0 to 59\n\n  singleDigit: /^\\d/, // 0 to 9\n  twoDigits: /^\\d{1,2}/, // 0 to 99\n  threeDigits: /^\\d{1,3}/, // 0 to 999\n  fourDigits: /^\\d{1,4}/, // 0 to 9999\n\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/, // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/, // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/, // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/, // 0 to 9999, -0 to -9999\n};\n\nexport const timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/,\n};\n","import {\n  millisecondsInHour,\n  millisecondsInMinute,\n  millisecondsInSecond,\n} from \"../../constants.js\";\n\nimport { numericPatterns } from \"./constants.js\";\n\nexport function mapValue(parseFnResult, mapFn) {\n  if (!parseFnResult) {\n    return parseFnResult;\n  }\n\n  return {\n    value: mapFn(parseFnResult.value),\n    rest: parseFnResult.rest,\n  };\n}\n\nexport function parseNumericPattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  return {\n    value: parseInt(matchResult[0], 10),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseTimezonePattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  // Input is 'Z'\n  if (matchResult[0] === \"Z\") {\n    return {\n      value: 0,\n      rest: dateString.slice(1),\n    };\n  }\n\n  const sign = matchResult[1] === \"+\" ? 1 : -1;\n  const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n\n  return {\n    value:\n      sign *\n      (hours * millisecondsInHour +\n        minutes * millisecondsInMinute +\n        seconds * millisecondsInSecond),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseAnyDigitsSigned(dateString) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);\n}\n\nexport function parseNDigits(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function parseNDigitsSigned(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^-?\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function dayPeriodEnumToHours(dayPeriod) {\n  switch (dayPeriod) {\n    case \"morning\":\n      return 4;\n    case \"evening\":\n      return 17;\n    case \"pm\":\n    case \"noon\":\n    case \"afternoon\":\n      return 12;\n    case \"am\":\n    case \"midnight\":\n    case \"night\":\n    default:\n      return 0;\n  }\n}\n\nexport function normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  const isCommonEra = currentYear > 0;\n  // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n  const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n\n  let result;\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    const rangeEnd = absCurrentYear + 50;\n    const rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;\n    const isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nexport function isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(options?.in || date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(options?.in || date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (+_date >= +startOfNextYear) {\n    return year + 1;\n  } else if (+_date >= +startOfThisYear) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","import { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfISOWeek} function options.\n */\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date, options) {\n  return startOfWeek(date, { ...options, weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { getWeekYear } from \"./getWeekYear.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(options?.in || date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { startOfWeekYear } from \"./startOfWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\nexport function getWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","import { getWeek } from \"./getWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setWeek} function options.\n */\n\n/**\n * @name setWeek\n * @category Week Helpers\n * @summary Set the local week to the given date.\n *\n * @description\n * Set the local week to the given date, saving the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param week - The week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the local week set\n *\n * @example\n * // Set the 1st week to 2 January 2005 with default options:\n * const result = setWeek(new Date(2005, 0, 2), 1)\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // Set the 1st week to 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January:\n * const result = setWeek(new Date(2005, 0, 2), 1, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sun Jan 4 2004 00:00:00\n */\nexport function setWeek(date, week, options) {\n  const date_ = toDate(date, options?.in);\n  const diff = getWeek(date_, options) - week;\n  date_.setDate(date_.getDate() - diff * 7);\n  return toDate(date_, options?.in);\n}\n\n// Fallback for modularized imports:\nexport default setWeek;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeekYear} function options.\n */\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { getISOWeekYear } from \"./getISOWeekYear.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\n\n/**\n * The {@link startOfISOWeekYear} function options.\n */\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date, options) {\n  const year = getISOWeekYear(date, options);\n  const fourthOfJanuary = constructFrom(options?.in || date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeek} function options.\n */\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { getISOWeek } from \"./getISOWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setISOWeek} function options.\n */\n\n/**\n * @name setISOWeek\n * @category ISO Week Helpers\n * @summary Set the ISO week to the given date.\n *\n * @description\n * Set the ISO week to the given date, saving the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The `Date` type of the context function.\n *\n * @param date - The date to be changed\n * @param week - The ISO week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the ISO week set\n *\n * @example\n * // Set the 53rd ISO week to 7 August 2004:\n * const result = setISOWeek(new Date(2004, 7, 7), 53)\n * //=> Sat Jan 01 2005 00:00:00\n */\nexport function setISOWeek(date, week, options) {\n  const _date = toDate(date, options?.in);\n  const diff = getISOWeek(_date, options) - week;\n  _date.setDate(_date.getDate() - diff * 7);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default setISOWeek;\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.js\";\n\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst DAYS_IN_MONTH_LEAP_YEAR = [\n  31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,\n];\n\n// Day of the month\nexport class DateParser extends Parser {\n  priority = 90;\n  subPriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"d\":\n        return parseNumericPattern(numericPatterns.date, dateString);\n      case \"do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    const month = date.getMonth();\n    if (isLeapYear) {\n      return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n    } else {\n      return value >= 1 && value <= DAYS_IN_MONTH[month];\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setDate(value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { addDays } from \"./addDays.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setDay} function options.\n */\n\n/**\n * @name setDay\n * @category Weekday Helpers\n * @summary Set the day of the week to the given date.\n *\n * @description\n * Set the day of the week to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param day - The day of the week of the new date\n * @param options - An object with options.\n *\n * @returns The new date with the day of the week set\n *\n * @example\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\n * const result = setDay(new Date(2014, 8, 1), 0)\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // Set week day to Sunday, with a weekStartsOn of Monday:\n * const result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setDay(date, day, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const date_ = toDate(date, options?.in);\n  const currentDay = date_.getDay();\n\n  const remainder = day % 7;\n  const dayIndex = (remainder + 7) % 7;\n\n  const delta = 7 - weekStartsOn;\n  const diff =\n    day < 0 || day > 6\n      ? day - ((currentDay + delta) % 7)\n      : ((dayIndex + delta) % 7) - ((currentDay + delta) % 7);\n  return addDays(date_, diff, options);\n}\n\n// Fallback for modularized imports:\nexport default setDay;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISODay} function options.\n */\n\n/**\n * @name getISODay\n * @category Weekday Helpers\n * @summary Get the day of the ISO week of the given date.\n *\n * @description\n * Get the day of the ISO week of the given date,\n * which is 7 for Sunday, 1 for Monday etc.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The day of ISO week\n *\n * @example\n * // Which day of the ISO week is 26 February 2012?\n * const result = getISODay(new Date(2012, 1, 26))\n * //=> 7\n */\nexport function getISODay(date, options) {\n  const day = toDate(date, options?.in).getDay();\n  return day === 0 ? 7 : day;\n}\n\n// Fallback for modularized imports:\nexport default getISODay;\n","import { addDays } from \"./addDays.js\";\nimport { getISODay } from \"./getISODay.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setISODay} function options.\n */\n\n/**\n * @name setISODay\n * @category Weekday Helpers\n * @summary Set the day of the ISO week to the given date.\n *\n * @description\n * Set the day of the ISO week to the given date.\n * ISO week starts with Monday.\n * 7 is the index of Sunday, 1 is the index of Monday, etc.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param day - The day of the ISO week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the day of the ISO week set\n *\n * @example\n * // Set Sunday to 1 September 2014:\n * const result = setISODay(new Date(2014, 8, 1), 7)\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setISODay(date, day, options) {\n  const date_ = toDate(date, options?.in);\n  const currentDay = getISODay(date_, options);\n  const diff = day - currentDay;\n  return addDays(date_, diff, options);\n}\n\n// Fallback for modularized imports:\nexport default setISODay;\n","import { toDate } from \"../toDate.js\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { EraParser } from \"./parsers/EraParser.js\";\nimport { YearParser } from \"./parsers/YearParser.js\";\nimport { LocalWeekYearParser } from \"./parsers/LocalWeekYearParser.js\";\nimport { ISOWeekYearParser } from \"./parsers/ISOWeekYearParser.js\";\nimport { ExtendedYearParser } from \"./parsers/ExtendedYearParser.js\";\nimport { QuarterParser } from \"./parsers/QuarterParser.js\";\nimport { StandAloneQuarterParser } from \"./parsers/StandAloneQuarterParser.js\";\nimport { MonthParser } from \"./parsers/MonthParser.js\";\nimport { StandAloneMonthParser } from \"./parsers/StandAloneMonthParser.js\";\nimport { LocalWeekParser } from \"./parsers/LocalWeekParser.js\";\nimport { ISOWeekParser } from \"./parsers/ISOWeekParser.js\";\nimport { DateParser } from \"./parsers/DateParser.js\";\nimport { DayOfYearParser } from \"./parsers/DayOfYearParser.js\";\nimport { DayParser } from \"./parsers/DayParser.js\";\nimport { LocalDayParser } from \"./parsers/LocalDayParser.js\";\nimport { StandAloneLocalDayParser } from \"./parsers/StandAloneLocalDayParser.js\";\nimport { ISODayParser } from \"./parsers/ISODayParser.js\";\nimport { AMPMParser } from \"./parsers/AMPMParser.js\";\nimport { AMPMMidnightParser } from \"./parsers/AMPMMidnightParser.js\";\nimport { DayPeriodParser } from \"./parsers/DayPeriodParser.js\";\nimport { Hour1to12Parser } from \"./parsers/Hour1to12Parser.js\";\nimport { Hour0to23Parser } from \"./parsers/Hour0to23Parser.js\";\nimport { Hour0To11Parser } from \"./parsers/Hour0To11Parser.js\";\nimport { Hour1To24Parser } from \"./parsers/Hour1To24Parser.js\";\nimport { MinuteParser } from \"./parsers/MinuteParser.js\";\nimport { SecondParser } from \"./parsers/SecondParser.js\";\nimport { FractionOfSecondParser } from \"./parsers/FractionOfSecondParser.js\";\nimport { ISOTimezoneWithZParser } from \"./parsers/ISOTimezoneWithZParser.js\";\nimport { ISOTimezoneParser } from \"./parsers/ISOTimezoneParser.js\";\nimport { TimestampSecondsParser } from \"./parsers/TimestampSecondsParser.js\";\nimport { TimestampMillisecondsParser } from \"./parsers/TimestampMillisecondsParser.js\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\nexport const parsers = {\n  G: new EraParser(),\n  y: new YearParser(),\n  Y: new LocalWeekYearParser(),\n  R: new ISOWeekYearParser(),\n  u: new ExtendedYearParser(),\n  Q: new QuarterParser(),\n  q: new StandAloneQuarterParser(),\n  M: new MonthParser(),\n  L: new StandAloneMonthParser(),\n  w: new LocalWeekParser(),\n  I: new ISOWeekParser(),\n  d: new DateParser(),\n  D: new DayOfYearParser(),\n  E: new DayParser(),\n  e: new LocalDayParser(),\n  c: new StandAloneLocalDayParser(),\n  i: new ISODayParser(),\n  a: new AMPMParser(),\n  b: new AMPMMidnightParser(),\n  B: new DayPeriodParser(),\n  h: new Hour1to12Parser(),\n  H: new Hour0to23Parser(),\n  K: new Hour0To11Parser(),\n  k: new Hour1To24Parser(),\n  m: new MinuteParser(),\n  s: new SecondParser(),\n  S: new FractionOfSecondParser(),\n  X: new ISOTimezoneWithZParser(),\n  x: new ISOTimezoneParser(),\n  t: new TimestampSecondsParser(),\n  T: new TimestampMillisecondsParser(),\n};\n","import { Parser } from \"../Parser.js\";\n\nexport class EraParser extends Parser {\n  priority = 140;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return (\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n\n      // A, B\n      case \"GGGGG\":\n        return match.era(dateString, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return (\n          match.era(dateString, { width: \"wide\" }) ||\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n    }\n  }\n\n  set(date, flags, value) {\n    flags.era = value;\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"R\", \"u\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.js\";\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nexport class YearParser extends Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"yy\",\n    });\n\n    switch (token) {\n      case \"y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { getWeekYear } from \"../../../getWeekYear.js\";\n\nimport { startOfWeek } from \"../../../startOfWeek.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.js\";\n\n// Local week-numbering year\nexport class LocalWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"YY\",\n    });\n\n    switch (token) {\n      case \"Y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"Yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value, options) {\n    const currentYear = getWeekYear(date, options);\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(\n        normalizedTwoDigitYear,\n        0,\n        options.firstWeekContainsDate,\n      );\n      date.setHours(0, 0, 0, 0);\n      return startOfWeek(date, options);\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\n    date.setHours(0, 0, 0, 0);\n    return startOfWeek(date, options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { startOfISOWeek } from \"../../../startOfISOWeek.js\";\nimport { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigitsSigned } from \"../utils.js\";\n\n// ISO week-numbering year\nexport class ISOWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"R\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    const firstWeekOfYear = constructFrom(date, 0);\n    firstWeekOfYear.setFullYear(value, 0, 4);\n    firstWeekOfYear.setHours(0, 0, 0, 0);\n    return startOfISOWeek(firstWeekOfYear);\n  }\n\n  incompatibleTokens = [\n    \"G\",\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigitsSigned } from \"../utils.js\";\n\nexport class ExtendedYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"u\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"G\", \"y\", \"Y\", \"R\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigits } from \"../utils.js\";\n\nexport class QuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n      case \"QQ\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigits } from \"../utils.js\";\n\nexport class StandAloneQuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n      case \"qq\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class MonthParser extends Parser {\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"M\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"MM\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // J, F, ..., D\n      case \"MMMMM\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class StandAloneMonthParser extends Parser {\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"LL\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // J, F, ..., D\n      case \"LLLLL\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setWeek } from \"../../../setWeek.js\";\nimport { startOfWeek } from \"../../../startOfWeek.js\";\nimport { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\n// Local week of year\nexport class LocalWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"w\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"wo\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value, options) {\n    return startOfWeek(setWeek(date, value, options), options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setISOWeek } from \"../../../setISOWeek.js\";\nimport { startOfISOWeek } from \"../../../startOfISOWeek.js\";\nimport { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\n// ISO week of year\nexport class ISOWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"I\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"Io\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value) {\n    return startOfISOWeek(setISOWeek(date, value));\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.js\";\n\nexport class DayOfYearParser extends Parser {\n  priority = 90;\n\n  subpriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"D\":\n      case \"DD\":\n        return parseNumericPattern(numericPatterns.dayOfYear, dateString);\n      case \"Do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    if (isLeapYear) {\n      return value >= 1 && value <= 366;\n    } else {\n      return value >= 1 && value <= 365;\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(0, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\n// Day of week\nexport class DayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"EEEEE\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// Local day of week\nexport class LocalDayParser extends Parser {\n  priority = 90;\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"e\":\n      case \"ee\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"eo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"eee\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"eeeee\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"eeee\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// Stand-alone local day of week\nexport class StandAloneLocalDayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"c\":\n      case \"cc\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"co\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"ccc\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // T\n      case \"ccccc\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // Tuesday\n      case \"cccc\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setISODay } from \"../../../setISODay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// ISO day of week\nexport class ISODayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => {\n      if (value === 0) {\n        return 7;\n      }\n      return value;\n    };\n\n    switch (token) {\n      // 2\n      case \"i\":\n      case \"ii\": // 02\n        return parseNDigits(token.length, dateString);\n      // 2nd\n      case \"io\":\n        return match.ordinalNumber(dateString, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // T\n      case \"iiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          }),\n          valueCallback,\n        );\n      // Tu\n      case \"iiiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"short\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // Tuesday\n      case \"iiii\":\n      default:\n        return mapValue(\n          match.day(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"abbreviated\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 7;\n  }\n\n  set(date, _flags, value) {\n    date = setISODay(date, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\nexport class AMPMParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n      case \"aaa\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"aaaaa\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"b\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\nexport class AMPMMidnightParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n      case \"bbb\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"bbbbb\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\n// in the morning, in the afternoon, in the evening, at night\nexport class DayPeriodParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"BBBBB\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour1to12Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"h\":\n        return parseNumericPattern(numericPatterns.hour12h, dateString);\n      case \"ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 12;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else if (!isPM && value === 12) {\n      date.setHours(0, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"H\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour0to23Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"H\":\n        return parseNumericPattern(numericPatterns.hour23h, dateString);\n      case \"Ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 23;\n  }\n\n  set(date, _flags, value) {\n    date.setHours(value, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour0To11Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"K\":\n        return parseNumericPattern(numericPatterns.hour11h, dateString);\n      case \"Ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"h\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour1To24Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"k\":\n        return parseNumericPattern(numericPatterns.hour24h, dateString);\n      case \"ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 24;\n  }\n\n  set(date, _flags, value) {\n    const hours = value <= 24 ? value % 24 : value;\n    date.setHours(hours, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"H\", \"K\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class MinuteParser extends Parser {\n  priority = 60;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"m\":\n        return parseNumericPattern(numericPatterns.minute, dateString);\n      case \"mo\":\n        return match.ordinalNumber(dateString, { unit: \"minute\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setMinutes(value, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class SecondParser extends Parser {\n  priority = 50;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"s\":\n        return parseNumericPattern(numericPatterns.second, dateString);\n      case \"so\":\n        return match.ordinalNumber(dateString, { unit: \"second\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setSeconds(value, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\nexport class FractionOfSecondParser extends Parser {\n  priority = 30;\n\n  parse(dateString, token) {\n    const valueCallback = (value) =>\n      Math.trunc(value * Math.pow(10, -token.length + 3));\n    return mapValue(parseNDigits(token.length, dateString), valueCallback);\n  }\n\n  set(date, _flags, value) {\n    date.setMilliseconds(value);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { timezonePatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseTimezonePattern } from \"../utils.js\";\n\n// Timezone (ISO-8601. +00:00 is `'Z'`)\nexport class ISOTimezoneWithZParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"X\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"XX\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"XXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"XXXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"XXX\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"x\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { timezonePatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseTimezonePattern } from \"../utils.js\";\n\n// Timezone (ISO-8601)\nexport class ISOTimezoneParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"x\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"xx\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"xxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"xxxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"xxx\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"X\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseAnyDigitsSigned } from \"../utils.js\";\n\nexport class TimestampSecondsParser extends Parser {\n  priority = 40;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value * 1000), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseAnyDigitsSigned } from \"../utils.js\";\n\nexport class TimestampMillisecondsParser extends Parser {\n  priority = 20;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { longFormatters } from \"./_lib/format/longFormatters.js\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { getDefaultOptions } from \"./getDefaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\nimport { DateTimezoneSetter } from \"./parse/_lib/Setter.js\";\nimport { parsers } from \"./parse/_lib/parsers.js\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { longFormatters, parsers };\n\n/**\n * The {@link parse} function options.\n */\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\n\nconst notWhitespaceRegExp = /\\S/;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangeably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear](https://date-fns.org/docs/setISOWeekYear)\n *    and [setWeekYear](https://date-fns.org/docs/setWeekYear)).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 7. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param dateStr - The string to parse\n * @param formatStr - The string of tokens\n * @param referenceDate - defines values missing from the parsed dateString\n * @param options - An object with options.\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @returns The parsed date\n *\n * @throws `options.locale` must contain `match` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\nexport function parse(dateStr, formatStr, referenceDate, options) {\n  const invalidDate = () => constructFrom(options?.in || referenceDate, NaN);\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  if (!formatStr)\n    return dateStr ? invalidDate() : toDate(referenceDate, options?.in);\n\n  const subFnOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  // If timezone isn't specified, it will try to use the context or\n  // the reference date and fallback to the system time zone.\n  const setters = [new DateTimezoneSetter(options?.in, referenceDate)];\n\n  const tokens = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter in longFormatters) {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp);\n\n  const usedTokens = [];\n\n  for (let token of tokens) {\n    if (\n      !options?.useAdditionalWeekYearTokens &&\n      isProtectedWeekYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n    if (\n      !options?.useAdditionalDayOfYearTokens &&\n      isProtectedDayOfYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n\n    const firstCharacter = token[0];\n    const parser = parsers[firstCharacter];\n    if (parser) {\n      const { incompatibleTokens } = parser;\n      if (Array.isArray(incompatibleTokens)) {\n        const incompatibleToken = usedTokens.find(\n          (usedToken) =>\n            incompatibleTokens.includes(usedToken.token) ||\n            usedToken.token === firstCharacter,\n        );\n        if (incompatibleToken) {\n          throw new RangeError(\n            `The format string mustn't contain \\`${incompatibleToken.fullToken}\\` and \\`${token}\\` at the same time`,\n          );\n        }\n      } else if (parser.incompatibleTokens === \"*\" && usedTokens.length > 0) {\n        throw new RangeError(\n          `The format string mustn't contain \\`${token}\\` and any other token at the same time`,\n        );\n      }\n\n      usedTokens.push({ token: firstCharacter, fullToken: token });\n\n      const parseResult = parser.run(\n        dateStr,\n        token,\n        locale.match,\n        subFnOptions,\n      );\n\n      if (!parseResult) {\n        return invalidDate();\n      }\n\n      setters.push(parseResult.setter);\n\n      dateStr = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      // Replace two single quote characters with one single quote character\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      }\n\n      // Cut token from string, or, if string doesn't match the token, return Invalid Date\n      if (dateStr.indexOf(token) === 0) {\n        dateStr = dateStr.slice(token.length);\n      } else {\n        return invalidDate();\n      }\n    }\n  }\n\n  // Check if the remaining input contains something other than whitespace\n  if (dateStr.length > 0 && notWhitespaceRegExp.test(dateStr)) {\n    return invalidDate();\n  }\n\n  const uniquePrioritySetters = setters\n    .map((setter) => setter.priority)\n    .sort((a, b) => b - a)\n    .filter((priority, index, array) => array.indexOf(priority) === index)\n    .map((priority) =>\n      setters\n        .filter((setter) => setter.priority === priority)\n        .sort((a, b) => b.subPriority - a.subPriority),\n    )\n    .map((setterArray) => setterArray[0]);\n\n  let date = toDate(referenceDate, options?.in);\n\n  if (isNaN(+date)) return invalidDate();\n\n  const flags = {};\n  for (const setter of uniquePrioritySetters) {\n    if (!setter.validate(date, subFnOptions)) {\n      return invalidDate();\n    }\n\n    const result = setter.set(date, flags, subFnOptions);\n    // Result is tuple (date, flags)\n    if (Array.isArray(result)) {\n      date = result[0];\n      Object.assign(flags, result[1]);\n      // Result is date\n    } else {\n      date = result;\n    }\n  }\n\n  return date;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default parse;\n","import {\n  millisecondsInHour,\n  millisecondsInMinute,\n} from \"./constants.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link parseISO} function options.\n */\n\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n * @param options - An object with options\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport function parseISO(argument, options) {\n  const invalidDate = () => constructFrom(options?.in, NaN);\n\n  const additionalDigits = options?.additionalDigits ?? 2;\n  const dateStrings = splitDateString(argument);\n\n  let date;\n  if (dateStrings.date) {\n    const parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(+date)) return invalidDate();\n\n  const timestamp = +date;\n  let time = 0;\n  let offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n    if (isNaN(time)) return invalidDate();\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n    if (isNaN(offset)) return invalidDate();\n  } else {\n    const tmpDate = new Date(timestamp + time);\n    const result = toDate(0, options?.in);\n    result.setFullYear(\n      tmpDate.getUTCFullYear(),\n      tmpDate.getUTCMonth(),\n      tmpDate.getUTCDate(),\n    );\n    result.setHours(\n      tmpDate.getUTCHours(),\n      tmpDate.getUTCMinutes(),\n      tmpDate.getUTCSeconds(),\n      tmpDate.getUTCMilliseconds(),\n    );\n    return result;\n  }\n\n  return toDate(timestamp + time + offset, options?.in);\n}\n\nconst patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/,\n};\n\nconst dateRegex =\n  /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nconst timeRegex =\n  /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nconst timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  const dateStrings = {};\n  const array = dateString.split(patterns.dateTimeDelimiter);\n  let timeString;\n\n  // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(\n        dateStrings.date.length,\n        dateString.length,\n      );\n    }\n  }\n\n  if (timeString) {\n    const token = patterns.timezone.exec(timeString);\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], \"\");\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  const regex = new RegExp(\n    \"^(?:(\\\\d{4}|[+-]\\\\d{\" +\n      (4 + additionalDigits) +\n      \"})|(\\\\d{2}|[+-]\\\\d{\" +\n      (2 + additionalDigits) +\n      \"})$)\",\n  );\n\n  const captures = dateString.match(regex);\n  // Invalid ISO-formatted year\n  if (!captures) return { year: NaN, restDateString: \"\" };\n\n  const year = captures[1] ? parseInt(captures[1]) : null;\n  const century = captures[2] ? parseInt(captures[2]) : null;\n\n  // either year or century is null, not both\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length),\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n\n  const captures = dateString.match(dateRegex);\n  // Invalid ISO-formatted string\n  if (!captures) return new Date(NaN);\n\n  const isWeekDate = !!captures[4];\n  const dayOfYear = parseDateUnit(captures[1]);\n  const month = parseDateUnit(captures[2]) - 1;\n  const day = parseDateUnit(captures[3]);\n  const week = parseDateUnit(captures[4]);\n  const dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    const date = new Date(0);\n    if (\n      !validateDate(year, month, day) ||\n      !validateDayOfYearDate(year, dayOfYear)\n    ) {\n      return new Date(NaN);\n    }\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  const captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  const hours = parseTimeUnit(captures[1]);\n  const minutes = parseTimeUnit(captures[2]);\n  const seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return (\n    hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000\n  );\n}\n\nfunction parseTimeUnit(value) {\n  return (value && parseFloat(value.replace(\",\", \".\"))) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === \"Z\") return 0;\n\n  const captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n\n  const sign = captures[1] === \"+\" ? -1 : 1;\n  const hours = parseInt(captures[2]);\n  const minutes = (captures[3] && parseInt(captures[3])) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  const date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  const fourthOfJanuaryDay = date.getUTCDay() || 7;\n  const diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\n\n// Validation functions\n\n// February is null to handle the leap year (using ||)\nconst daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\nfunction validateDate(year, month, date) {\n  return (\n    month >= 0 &&\n    month <= 11 &&\n    date >= 1 &&\n    date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28))\n  );\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return (\n    seconds >= 0 &&\n    seconds < 60 &&\n    minutes >= 0 &&\n    minutes < 60 &&\n    hours >= 0 &&\n    hours < 25\n  );\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}\n\n// Fallback for modularized imports:\nexport default parseISO;\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { isDate } from \"./isDate.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  return !((!isDate(date) && typeof date !== \"number\") || isNaN(+toDate(date)));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","import { constructFrom } from \"../constructFrom.js\";\n\nexport function normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === \"object\"),\n  );\n  return dates.map(normalize);\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInDay } from \"./constants.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfYear} function options.\n */\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setFullYear(date_.getFullYear(), 0, 1);\n  date_.setHours(0, 0, 0, 0);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { startOfYear } from \"./startOfYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getDayOfYear} function options.\n */\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.js\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.js\";\nimport { getISOWeek } from \"../../getISOWeek.js\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.js\";\nimport { getWeek } from \"../../getWeek.js\";\nimport { getWeekYear } from \"../../getWeekYear.js\";\n\nimport { addLeadingZeros } from \"../addLeadingZeros.js\";\nimport { lightFormatters } from \"./lightFormatters.js\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(+date / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    return addLeadingZeros(+date, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { formatters } from \"./_lib/format/formatters.js\";\nimport { longFormatters } from \"./_lib/format/longFormatters.js\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.js\";\nimport { isValid } from \"./isValid.js\";\nimport { toDate } from \"./toDate.js\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date, options?.in);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addMilliseconds} function options.\n */\n\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of milliseconds to be added.\n * @param options - The options object\n *\n * @returns The new date with the milliseconds added\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\nexport function addMilliseconds(date, amount, options) {\n  return constructFrom(options?.in || date, +toDate(date) + amount);\n}\n\n// Fallback for modularized imports:\nexport default addMilliseconds;\n","import { addMilliseconds } from \"./addMilliseconds.js\";\n\n/**\n * The {@link addSeconds} function options.\n */\n\n/**\n * @name addSeconds\n * @category Second Helpers\n * @summary Add the specified number of seconds to the given date.\n *\n * @description\n * Add the specified number of seconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of seconds to be added.\n * @param options - An object with options\n *\n * @returns The new date with the seconds added\n *\n * @example\n * // Add 30 seconds to 10 July 2014 12:45:00:\n * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:45:30\n */\nexport function addSeconds(date, amount, options) {\n  return addMilliseconds(date, amount * 1000, options);\n}\n\n// Fallback for modularized imports:\nexport default addSeconds;\n","import { millisecondsInMinute } from \"./constants.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addMinutes} function options.\n */\n\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of minutes to be added.\n * @param options - An object with options\n *\n * @returns The new date with the minutes added\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\nexport function addMinutes(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  _date.setTime(_date.getTime() + amount * millisecondsInMinute);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addMinutes;\n","import { addMilliseconds } from \"./addMilliseconds.js\";\nimport { millisecondsInHour } from \"./constants.js\";\n\n/**\n * The {@link addHours} function options.\n */\n\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of hours to be added\n * @param options - An object with options\n *\n * @returns The new date with the hours added\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\nexport function addHours(date, amount, options) {\n  return addMilliseconds(date, amount * millisecondsInHour, options);\n}\n\n// Fallback for modularized imports:\nexport default addHours;\n","import { addDays } from \"./addDays.js\";\n\n/**\n * The {@link addWeeks} function options.\n */\n\n/**\n * @name addWeeks\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of weeks to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of weeks to be added.\n * @param options - An object with options\n *\n * @returns The new date with the weeks added\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * const result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\nexport function addWeeks(date, amount, options) {\n  return addDays(date, amount * 7, options);\n}\n\n// Fallback for modularized imports:\nexport default addWeeks;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addMonths} function options.\n */\n\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of months to be added.\n * @param options - The options object\n *\n * @returns The new date with the months added\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n *\n * // Add one month to 30 January 2023:\n * const result = addMonths(new Date(2023, 0, 30), 1)\n * //=> Tue Feb 28 2023 00:00:00\n */\nexport function addMonths(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  const dayOfMonth = _date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  const endOfDesiredMonth = constructFrom(options?.in || date, _date.getTime());\n  endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);\n  const daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    _date.setFullYear(\n      endOfDesiredMonth.getFullYear(),\n      endOfDesiredMonth.getMonth(),\n      dayOfMonth,\n    );\n    return _date;\n  }\n}\n\n// Fallback for modularized imports:\nexport default addMonths;\n","import { addMonths } from \"./addMonths.js\";\n\n/**\n * The {@link addQuarters} function options.\n */\n\n/**\n * @name addQuarters\n * @category Quarter Helpers\n * @summary Add the specified number of year quarters to the given date.\n *\n * @description\n * Add the specified number of year quarters to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of quarters to be added.\n * @param options - An object with options\n *\n * @returns The new date with the quarters added\n *\n * @example\n * // Add 1 quarter to 1 September 2014:\n * const result = addQuarters(new Date(2014, 8, 1), 1)\n * //=; Mon Dec 01 2014 00:00:00\n */\nexport function addQuarters(date, amount, options) {\n  return addMonths(date, amount * 3, options);\n}\n\n// Fallback for modularized imports:\nexport default addQuarters;\n","import { addMonths } from \"./addMonths.js\";\n\n/**\n * The {@link addYears} function options.\n */\n\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type.\n *\n * @param date - The date to be changed\n * @param amount - The amount of years to be added.\n * @param options - The options\n *\n * @returns The new date with the years added\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * const result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\nexport function addYears(date, amount, options) {\n  return addMonths(date, amount * 12, options);\n}\n\n// Fallback for modularized imports:\nexport default addYears;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n *\n * @returns The number of milliseconds\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\nexport function differenceInMilliseconds(laterDate, earlierDate) {\n  return +toDate(laterDate) - +toDate(earlierDate);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMilliseconds;\n","export function getRoundingMethod(method) {\n  return (number) => {\n    const round = method ? Math[method] : Math.trunc;\n    const result = round(number);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  };\n}\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.js\";\n\n/**\n * The {@link differenceInSeconds} function options.\n */\n\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of seconds\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\nexport function differenceInSeconds(laterDate, earlierDate, options) {\n  const diff = differenceInMilliseconds(laterDate, earlierDate) / 1000;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInSeconds;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { millisecondsInMinute } from \"./constants.js\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.js\";\n\n/**\n * The {@link differenceInMinutes} function options.\n */\n\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of minutes\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\nexport function differenceInMinutes(dateLeft, dateRight, options) {\n  const diff =\n    differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMinutes;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInHour } from \"./constants.js\";\n\n/**\n * The {@link differenceInHours} function options.\n */\n\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of hours\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\nexport function differenceInHours(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n  const diff = (+laterDate_ - +earlierDate_) / millisecondsInHour;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInHours;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\n\n/**\n * The {@link differenceInDays} function options.\n */\n\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full days according to the local timezone\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n *\n * @example\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n * //=> 92\n */\nexport function differenceInDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const sign = compareLocalAsc(laterDate_, earlierDate_);\n  const difference = Math.abs(\n    differenceInCalendarDays(laterDate_, earlierDate_),\n  );\n\n  laterDate_.setDate(laterDate_.getDate() - sign * difference);\n\n  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n  const isLastDayNotFull = Number(\n    compareLocalAsc(laterDate_, earlierDate_) === -sign,\n  );\n\n  const result = sign * (difference - isLastDayNotFull);\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\nfunction compareLocalAsc(laterDate, earlierDate) {\n  const diff =\n    laterDate.getFullYear() - earlierDate.getFullYear() ||\n    laterDate.getMonth() - earlierDate.getMonth() ||\n    laterDate.getDate() - earlierDate.getDate() ||\n    laterDate.getHours() - earlierDate.getHours() ||\n    laterDate.getMinutes() - earlierDate.getMinutes() ||\n    laterDate.getSeconds() - earlierDate.getSeconds() ||\n    laterDate.getMilliseconds() - earlierDate.getMilliseconds();\n\n  if (diff < 0) return -1;\n  if (diff > 0) return 1;\n\n  // Return 0 if diff is 0; return NaN if diff is NaN\n  return diff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInDays;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { differenceInDays } from \"./differenceInDays.js\";\n\n/**\n * The {@link differenceInWeeks} function options.\n */\n\n/**\n * @name differenceInWeeks\n * @category Week Helpers\n * @summary Get the number of full weeks between the given dates.\n *\n * @description\n * Get the number of full weeks between two dates. Fractional weeks are\n * truncated towards zero by default.\n *\n * One \"full week\" is the distance between a local time in one day to the same\n * local time 7 days earlier or later. A full week can sometimes be less than\n * or more than 7*24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 7*24-hour periods, use this instead:\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/(7*24))|0`.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full weeks\n *\n * @example\n * // How many full weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))\n * //=> 2\n *\n * @example\n * // How many full weeks are between\n * // 1 March 2020 0:00 and 6 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 8 weeks (54 days),\n * // even if DST starts and the period has\n * // only 54*24-1 hours.\n * const result = differenceInWeeks(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 6)\n * )\n * //=> 8\n */\nexport function differenceInWeeks(laterDate, earlierDate, options) {\n  const diff = differenceInDays(laterDate, earlierDate, options) / 7;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInWeeks;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @param dateLeft - The first date to compare\n * @param dateRight - The second date to compare\n *\n * @returns The result of the comparison\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nexport function compareAsc(dateLeft, dateRight) {\n  const diff = +toDate(dateLeft) - +toDate(dateRight);\n\n  if (diff < 0) return -1;\n  else if (diff > 0) return 1;\n\n  // Return 0 if diff is 0; return NaN if diff is NaN\n  return diff;\n}\n\n// Fallback for modularized imports:\nexport default compareAsc;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\n\n/**\n * The {@link differenceInCalendarMonths} function options.\n */\n\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of calendar months\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\nexport function differenceInCalendarMonths(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();\n  const monthsDiff = laterDate_.getMonth() - earlierDate_.getMonth();\n\n  return yearsDiff * 12 + monthsDiff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarMonths;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfDay} function options.\n */\n\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a day\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\nexport function endOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfDay;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfMonth} function options.\n */\n\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a month\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport function endOfMonth(date, options) {\n  const _date = toDate(date, options?.in);\n  const month = _date.getMonth();\n  _date.setFullYear(_date.getFullYear(), month + 1, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfMonth;\n","import { endOfDay } from \"./endOfDay.js\";\nimport { endOfMonth } from \"./endOfMonth.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @param date - The date to check\n * @param options - An object with options\n *\n * @returns The date is the last day of a month\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\nexport function isLastDayOfMonth(date, options) {\n  const _date = toDate(date, options?.in);\n  return +endOfDay(_date, options) === +endOfMonth(_date, options);\n}\n\n// Fallback for modularized imports:\nexport default isLastDayOfMonth;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { compareAsc } from \"./compareAsc.js\";\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.js\";\nimport { isLastDayOfMonth } from \"./isLastDayOfMonth.js\";\n\n/**\n * The {@link differenceInMonths} function options.\n */\n\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full months\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\nexport function differenceInMonths(laterDate, earlierDate, options) {\n  const [laterDate_, workingLaterDate, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    laterDate,\n    earlierDate,\n  );\n\n  const sign = compareAsc(workingLaterDate, earlierDate_);\n  const difference = Math.abs(\n    differenceInCalendarMonths(workingLaterDate, earlierDate_),\n  );\n\n  if (difference < 1) return 0;\n\n  if (workingLaterDate.getMonth() === 1 && workingLaterDate.getDate() > 27)\n    workingLaterDate.setDate(30);\n\n  workingLaterDate.setMonth(workingLaterDate.getMonth() - sign * difference);\n\n  let isLastMonthNotFull = compareAsc(workingLaterDate, earlierDate_) === -sign;\n\n  if (\n    isLastDayOfMonth(laterDate_) &&\n    difference === 1 &&\n    compareAsc(laterDate_, earlierDate_) === 1\n  ) {\n    isLastMonthNotFull = false;\n  }\n\n  const result = sign * (difference - +isLastMonthNotFull);\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInMonths;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { differenceInMonths } from \"./differenceInMonths.js\";\n\n/**\n * The {@link differenceInQuarters} function options.\n */\n\n/**\n * @name differenceInQuarters\n * @category Quarter Helpers\n * @summary Get the number of quarters between the given dates.\n *\n * @description\n * Get the number of quarters between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of full quarters\n *\n * @example\n * // How many full quarters are between 31 December 2013 and 2 July 2014?\n * const result = differenceInQuarters(new Date(2014, 6, 2), new Date(2013, 11, 31))\n * //=> 2\n */\nexport function differenceInQuarters(laterDate, earlierDate, options) {\n  const diff = differenceInMonths(laterDate, earlierDate, options) / 3;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInQuarters;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\n\n/**\n * The {@link differenceInCalendarYears} function options.\n */\n\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n\n * @returns The number of calendar years\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * );\n * //=> 2\n */\nexport function differenceInCalendarYears(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n  return laterDate_.getFullYear() - earlierDate_.getFullYear();\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarYears;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { compareAsc } from \"./compareAsc.js\";\nimport { differenceInCalendarYears } from \"./differenceInCalendarYears.js\";\n\n/**\n * The {@link differenceInYears} function options.\n */\n\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full years\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\nexport function differenceInYears(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  // -1 if the left date is earlier than the right date\n  // 2023-12-31 - 2024-01-01 = -1\n  const sign = compareAsc(laterDate_, earlierDate_);\n\n  // First calculate the difference in calendar years\n  // 2024-01-01 - 2023-12-31 = 1 year\n  const diff = Math.abs(differenceInCalendarYears(laterDate_, earlierDate_));\n\n  // Now we need to calculate if the difference is full. To do that we set\n  // both dates to the same year and check if the both date's month and day\n  // form a full year.\n  laterDate_.setFullYear(1584);\n  earlierDate_.setFullYear(1584);\n\n  // For it to be true, when the later date is indeed later than the earlier date\n  // (2026-02-01 - 2023-12-10 = 3 years), the difference is full if\n  // the normalized later date is also later than the normalized earlier date.\n  // In our example, 1584-02-01 is earlier than 1584-12-10, so the difference\n  // is partial, hence we need to subtract 1 from the difference 3 - 1 = 2.\n  const partial = compareAsc(laterDate_, earlierDate_) === -sign;\n\n  const result = sign * (diff - +partial);\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInYears;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfSecond} function options.\n */\n\n/**\n * @name startOfSecond\n * @category Second Helpers\n * @summary Return the start of a second for the given date.\n *\n * @description\n * Return the start of a second for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a second\n *\n * @example\n * // The start of a second for 1 December 2014 22:15:45.400:\n * const result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.000\n */\nexport function startOfSecond(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setMilliseconds(0);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default startOfSecond;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfMinute} function options.\n */\n\n/**\n * @name startOfMinute\n * @category Minute Helpers\n * @summary Return the start of a minute for the given date.\n *\n * @description\n * Return the start of a minute for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a minute\n *\n * @example\n * // The start of a minute for 1 December 2014 22:15:45.400:\n * const result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:00\n */\nexport function startOfMinute(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setSeconds(0, 0);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default startOfMinute;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfHour} function options.\n */\n\n/**\n * @name startOfHour\n * @category Hour Helpers\n * @summary Return the start of an hour for the given date.\n *\n * @description\n * Return the start of an hour for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an hour\n *\n * @example\n * // The start of an hour for 2 September 2014 11:55:00:\n * const result = startOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:00:00\n */\nexport function startOfHour(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setMinutes(0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfHour;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfMonth} function options.\n */\n\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date. The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments.\n * Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed,\n * or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a month\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfMonth(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setDate(1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfMonth;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfQuarter} function options.\n */\n\n/**\n * @name startOfQuarter\n * @category Quarter Helpers\n * @summary Return the start of a year quarter for the given date.\n *\n * @description\n * Return the start of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a quarter\n *\n * @example\n * // The start of a quarter for 2 September 2014 11:55:00:\n * const result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Jul 01 2014 00:00:00\n */\nexport function startOfQuarter(date, options) {\n  const _date = toDate(date, options?.in);\n  const currentMonth = _date.getMonth();\n  const month = currentMonth - (currentMonth % 3);\n  _date.setMonth(month, 1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfQuarter;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfSecond} function options.\n */\n\n/**\n * @name endOfSecond\n * @category Second Helpers\n * @summary Return the end of a second for the given date.\n *\n * @description\n * Return the end of a second for the given date.\n * The result will be in the local timezone if no `in` option is specified.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a second\n *\n * @example\n * // The end of a second for 1 December 2014 22:15:45.400:\n * const result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.999\n */\nexport function endOfSecond(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setMilliseconds(999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfSecond;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfMinute} function options.\n */\n\n/**\n * @name endOfMinute\n * @category Minute Helpers\n * @summary Return the end of a minute for the given date.\n *\n * @description\n * Return the end of a minute for the given date.\n * The result will be in the local timezone or the provided context.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a minute\n *\n * @example\n * // The end of a minute for 1 December 2014 22:15:45.400:\n * const result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:59.999\n */\nexport function endOfMinute(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setSeconds(59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfMinute;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfHour} function options.\n */\n\n/**\n * @name endOfHour\n * @category Hour Helpers\n * @summary Return the end of an hour for the given date.\n *\n * @description\n * Return the end of an hour for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of an hour\n *\n * @example\n * // The end of an hour for 2 September 2014 11:55:00:\n * const result = endOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:59:59.999\n */\nexport function endOfHour(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setMinutes(59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfHour;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfWeek} function options.\n */\n\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a week\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\nexport function endOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n\n  _date.setDate(_date.getDate() + diff);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfWeek;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfQuarter} function options.\n */\n\n/**\n * @name endOfQuarter\n * @category Quarter Helpers\n * @summary Return the end of a year quarter for the given date.\n *\n * @description\n * Return the end of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a quarter\n *\n * @example\n * // The end of a quarter for 2 September 2014 11:55:00:\n * const result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport function endOfQuarter(date, options) {\n  const _date = toDate(date, options?.in);\n  const currentMonth = _date.getMonth();\n  const month = currentMonth - (currentMonth % 3) + 3;\n  _date.setMonth(month, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfQuarter;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfYear} function options.\n */\n\n/**\n * @name endOfYear\n * @category Year Helpers\n * @summary Return the end of a year for the given date.\n *\n * @description\n * Return the end of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The end of a year\n *\n * @example\n * // The end of a year for 2 September 2014 11:55:00:\n * const result = endOfYear(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Wed Dec 31 2014 23:59:59.999\n */\nexport function endOfYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n  _date.setFullYear(year + 1, 0, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfYear;\n","/*!\n * chartjs-adapter-date-fns v3.0.0\n * https://www.chartjs.org\n * (c) 2022 chartjs-adapter-date-fns Contributors\n * Released under the MIT license\n */\nimport { _adapters } from 'chart.js';\nimport { toDate, parse, parseISO, isValid, format, addYears, addQuarters, addMonths, addWeeks, addDays, addHours, addMinutes, addSeconds, addMilliseconds, differenceInYears, differenceInQuarters, differenceInMonths, differenceInWeeks, differenceInDays, differenceInHours, differenceInMinutes, differenceInSeconds, differenceInMilliseconds, startOfYear, startOfQuarter, startOfMonth, startOfWeek, startOfDay, startOfHour, startOfMinute, startOfSecond, endOfYear, endOfQuarter, endOfMonth, endOfWeek, endOfDay, endOfHour, endOfMinute, endOfSecond } from 'date-fns';\n\nconst FORMATS = {\n  datetime: 'MMM d, yyyy, h:mm:ss aaaa',\n  millisecond: 'h:mm:ss.SSS aaaa',\n  second: 'h:mm:ss aaaa',\n  minute: 'h:mm aaaa',\n  hour: 'ha',\n  day: 'MMM d',\n  week: 'PP',\n  month: 'MMM yyyy',\n  quarter: 'qqq - yyyy',\n  year: 'yyyy'\n};\n\n_adapters._date.override({\n  _id: 'date-fns', // DEBUG\n\n  formats: function() {\n    return FORMATS;\n  },\n\n  parse: function(value, fmt) {\n    if (value === null || typeof value === 'undefined') {\n      return null;\n    }\n    const type = typeof value;\n    if (type === 'number' || value instanceof Date) {\n      value = toDate(value);\n    } else if (type === 'string') {\n      if (typeof fmt === 'string') {\n        value = parse(value, fmt, new Date(), this.options);\n      } else {\n        value = parseISO(value, this.options);\n      }\n    }\n    return isValid(value) ? value.getTime() : null;\n  },\n\n  format: function(time, fmt) {\n    return format(time, fmt, this.options);\n  },\n\n  add: function(time, amount, unit) {\n    switch (unit) {\n    case 'millisecond': return addMilliseconds(time, amount);\n    case 'second': return addSeconds(time, amount);\n    case 'minute': return addMinutes(time, amount);\n    case 'hour': return addHours(time, amount);\n    case 'day': return addDays(time, amount);\n    case 'week': return addWeeks(time, amount);\n    case 'month': return addMonths(time, amount);\n    case 'quarter': return addQuarters(time, amount);\n    case 'year': return addYears(time, amount);\n    default: return time;\n    }\n  },\n\n  diff: function(max, min, unit) {\n    switch (unit) {\n    case 'millisecond': return differenceInMilliseconds(max, min);\n    case 'second': return differenceInSeconds(max, min);\n    case 'minute': return differenceInMinutes(max, min);\n    case 'hour': return differenceInHours(max, min);\n    case 'day': return differenceInDays(max, min);\n    case 'week': return differenceInWeeks(max, min);\n    case 'month': return differenceInMonths(max, min);\n    case 'quarter': return differenceInQuarters(max, min);\n    case 'year': return differenceInYears(max, min);\n    default: return 0;\n    }\n  },\n\n  startOf: function(time, unit, weekday) {\n    switch (unit) {\n    case 'second': return startOfSecond(time);\n    case 'minute': return startOfMinute(time);\n    case 'hour': return startOfHour(time);\n    case 'day': return startOfDay(time);\n    case 'week': return startOfWeek(time);\n    case 'isoWeek': return startOfWeek(time, {weekStartsOn: +weekday});\n    case 'month': return startOfMonth(time);\n    case 'quarter': return startOfQuarter(time);\n    case 'year': return startOfYear(time);\n    default: return time;\n    }\n  },\n\n  endOf: function(time, unit) {\n    switch (unit) {\n    case 'second': return endOfSecond(time);\n    case 'minute': return endOfMinute(time);\n    case 'hour': return endOfHour(time);\n    case 'day': return endOfDay(time);\n    case 'week': return endOfWeek(time);\n    case 'month': return endOfMonth(time);\n    case 'quarter': return endOfQuarter(time);\n    case 'year': return endOfYear(time);\n    default: return time;\n    }\n  }\n});\n","import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types.js';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, BaseChartComponent } from './types.js';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils.js';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  props: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  const {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...canvasProps\n  } = props;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<ChartJS<TType, TData, TLabel> | null>(null);\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      role='img'\n      height={height}\n      width={width}\n      {...canvasProps}\n    >\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as BaseChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types.js';\nimport { Chart } from './chart.js';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"],"names":["Math","pow","millisecondsInWeek","millisecondsInMinute","millisecondsInHour","constructFromSymbol","Symbol","for","constructFrom","date","value","Date","constructor","toDate","argument","context","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","buildFormatLongFn","args","options","arguments","length","undefined","width","String","defaultWidth","formats","formatLong","full","long","medium","short","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","valuesArray","formattingValues","defaultFormattingWidth","values","argumentCallback","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","key","Array","isArray","array","predicate","findIndex","pattern","test","object","Object","prototype","hasOwnProperty","call","findKey","valueCallback","rest","slice","enUS","code","formatDistance","token","count","result","tokenValue","replace","toString","addSuffix","comparison","formatRelative","_date","_baseDate","_options","localize","ordinalNumber","dirtyNumber","number","Number","rem100","era","narrow","abbreviated","wide","quarter","month","day","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","parsePattern","parseInt","parseResult","any","index","weekStartsOn","firstWeekContainsDate","dateLongFormatter","timeLongFormatter","longFormatters","p","P","dateTimeLongFormatter","datePattern","timePattern","dateTimeFormat","dayOfYearTokenRE","weekYearTokenRE","throwTokens","isProtectedDayOfYearToken","isProtectedWeekYearToken","warnOrThrowProtectedError","format","input","_message","subject","concat","toLowerCase","message","console","warn","includes","RangeError","defaultOptions","getDefaultOptions","assign","getInternalDefaultOptions","transpose","date_","_constructor$prototyp","isConstructor","setFullYear","getFullYear","getMonth","getDate","setHours","getHours","getMinutes","getSeconds","getMilliseconds","Setter","_defineProperty","validate","_utcDate","ValueSetter","validateValue","setValue","priority","subPriority","super","this","set","flags","DateTimezoneSetter","reference","timestampIsSet","Parser","run","dateString","parse","setter","_value","numericPatterns","timezonePatterns","mapValue","parseFnResult","mapFn","parseNumericPattern","parseTimezonePattern","sign","hours","minutes","seconds","parseAnyDigitsSigned","parseNDigits","n","RegExp","parseNDigitsSigned","dayPeriodEnumToHours","normalizeTwoDigitYear","twoDigitYear","currentYear","isCommonEra","absCurrentYear","rangeEnd","trunc","isLeapYearIndex","year","startOfWeek","_ref","_ref2","_ref3","_options$weekStartsOn","_options$locale","_defaultOptions$local","locale","in","getDay","diff","setDate","getWeekYear","_options$firstWeekCon","firstWeekOfNextYear","startOfNextYear","firstWeekOfThisYear","startOfThisYear","startOfISOWeek","_objectSpread","startOfWeekYear","firstWeek","getWeek","round","setWeek","week","getISOWeekYear","fourthOfJanuaryOfNextYear","fourthOfJanuaryOfThisYear","getTime","startOfISOWeekYear","fourthOfJanuary","getISOWeek","setISOWeek","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","addDays","amount","isNaN","NaN","setDay","currentDay","delta","getISODay","setISODay","getTimezoneOffsetInMilliseconds","utcDate","UTC","setUTCFullYear","parsers","G","y","isTwoDigitYear","unit","normalizedTwoDigitYear","Y","R","_flags","firstWeekOfYear","u","Q","setMonth","q","M","L","w","I","d","isLeapYear","D","E","e","wholeWeekDays","floor","c","i","a","b","B","h","isPM","H","K","k","m","setMinutes","s","setSeconds","S","setMilliseconds","X","x","t","T","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","notWhitespaceRegExp","unescapedLatinCharacterRegExp","dateStr","formatStr","referenceDate","_ref4","_options$locale2","_ref5","_ref6","_ref7","_options$locale3","_defaultOptions$local2","invalidDate","defaultLocale","subFnOptions","setters","tokens","map","substring","firstCharacter","longFormatter","join","usedTokens","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","parser","incompatibleTokens","incompatibleToken","find","usedToken","fullToken","push","indexOf","uniquePrioritySetters","sort","filter","setterArray","parseISO","_options$additionalDi","additionalDigits","dateStrings","split","patterns","dateTimeDelimiter","timeString","timeZoneDelimiter","substr","timezone","exec","splitDateString","parseYearResult","regex","captures","restDateString","century","parseYear","dateRegex","isWeekDate","dayOfYear","parseDateUnit","dayOfWeek","_year","validateWeekDate","isoWeekYear","fourthOfJanuaryDay","getUTCDay","setUTCDate","getUTCDate","dayOfISOWeekYear","daysInMonths","validateDate","validateDayOfYearDate","max","parseDate","timestamp","offset","timeRegex","parseTimeUnit","validateTime","parseTime","tmpDate","getUTCFullYear","getUTCMonth","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","timezoneString","timezoneRegex","_hours","validateTimezone","parseTimezone","parseFloat","isDate","isValid","normalizeDates","_len","dates","_key","normalize","bind","startOfDay","differenceInCalendarDays","laterDate","earlierDate","laterDate_","earlierDate_","laterStartOfDay","earlierStartOfDay","laterTimestamp","earlierTimestamp","startOfYear","getDayOfYear","addLeadingZeros","targetLength","abs","padStart","lightFormatters","signedYear","dayPeriodEnumValue","toUpperCase","numberOfDigits","milliseconds","dayPeriodEnum","formatters","signedWeekYear","weekYear","ceil","isoWeek","localDayOfWeek","isoDayOfWeek","_localize","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","O","formatTimezoneShort","z","delimiter","absOffset","originalDate","parts","isToken","cleanEscapedString","preprocessor","formatterOptions","part","formatter","matched","addMilliseconds","addSeconds","addMinutes","setTime","addHours","addWeeks","addMonths","dayOfMonth","endOfDesiredMonth","addQuarters","addYears","differenceInMilliseconds","getRoundingMethod","method","differenceInSeconds","roundingMethod","differenceInMinutes","dateLeft","dateRight","differenceInHours","differenceInDays","compareLocalAsc","difference","differenceInWeeks","compareAsc","differenceInCalendarMonths","endOfDay","endOfMonth","isLastDayOfMonth","differenceInMonths","workingLaterDate","isLastMonthNotFull","differenceInQuarters","differenceInCalendarYears","differenceInYears","startOfSecond","startOfMinute","startOfHour","startOfMonth","startOfQuarter","currentMonth","endOfSecond","endOfMinute","endOfHour","endOfWeek","endOfQuarter","endOfYear","FORMATS","datetime","millisecond","second","minute","hour","_adapters","override","_id","fmt","type","add","min","startOf","weekday","endOf","defaultDatasetIdKey","reforwardRef","ref","current","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","addedDatasets","datasets","nextDataset","currentDataset","dataset","data","cloneData","nextData","getDatasetAtEvent","chart","event","getElementsAtEventForMode","nativeEvent","intersect","getElementAtEvent","getElementsAtEvent","ChartComponent","props","height","redraw","plugins","fallbackContent","updateMode","canvasProps","_objectWithoutProperties","_excluded","canvasRef","useRef","chartRef","renderChart","Chart$1","destroyChart","destroy","useEffect","nextOptions","setOptions","config","setTimeout","update","React","role","Chart","forwardRef","createTypedChart","registerables","register","Line","LineController","Bar","BarController","Radar","RadarController","Doughnut","DoughnutController","PolarArea","PolarAreaController","Bubble","BubbleController","Pie","PieController","Scatter","ScatterController"],"sourceRoot":""}