{"version":3,"file":"static/js/793.a0e4b171.chunk.js","mappings":"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","sources":["components/ActiveSessionsModal.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst ActiveSessionsModal = ({ \r\n  isOpen, \r\n  onClose, \r\n  sessions, \r\n  currentSessionId, \r\n  onTerminateSession, \r\n  onRefresh \r\n}) => {\r\n  const [terminatedSessions, setTerminatedSessions] = useState(new Set());\r\n  const [isTerminating, setIsTerminating] = useState(null);\r\n  const [isEndingAll, setIsEndingAll] = useState(false);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  const formatTimeAgo = (date) => {\r\n    if (!date) return 'Unknown';\r\n    \r\n    const now = new Date();\r\n    const diffInSeconds = Math.floor((now - date) / 1000);\r\n    \r\n    if (diffInSeconds < 60) return 'Just now';\r\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;\r\n    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;\r\n    return `${Math.floor(diffInSeconds / 86400)} days ago`;\r\n  };\r\n\r\n  const getDeviceIcon = (deviceType) => {\r\n    switch (deviceType?.toLowerCase()) {\r\n      case 'mobile':\r\n        return (\r\n          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 18h.01M8 21h8a1 1 0 001-1V4a1 1 0 00-1-1H8a1 1 0 00-1 1v16a1 1 0 001 1z\" />\r\n          </svg>\r\n        );\r\n      case 'tablet':\r\n        return (\r\n          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 18h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z\" />\r\n          </svg>\r\n        );\r\n      default:\r\n        return (\r\n          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2z\" />\r\n          </svg>\r\n        );\r\n    }\r\n  };\r\n\r\n  const getBrowserIcon = (browser) => {\r\n    const browserName = browser?.toLowerCase();\r\n    if (browserName?.includes('chrome')) return '🌐';\r\n    if (browserName?.includes('firefox')) return '🦊';\r\n    if (browserName?.includes('safari')) return '🧭';\r\n    if (browserName?.includes('edge')) return '📘';\r\n    if (browserName?.includes('opera')) return '🎭';\r\n    return '🌐';\r\n  };\r\n\r\n  const getLocationFromIP = (ipAddress) => {\r\n    // In a real app, you'd use a geolocation service\r\n    // For now, we'll just show the IP\r\n    return ipAddress && ipAddress !== 'Unknown' ? `IP: ${ipAddress}` : 'Location unavailable';\r\n  };\r\n\r\n  const isCurrentSession = (sessionId) => {\r\n    return sessionId === currentSessionId;\r\n  };\r\n\r\n  const getActivityStatus = (lastActivity) => {\r\n    if (!lastActivity) return { status: 'Unknown', color: 'gray' };\r\n    \r\n    const now = new Date();\r\n    const diffInMinutes = Math.floor((now - lastActivity) / (1000 * 60));\r\n    \r\n    if (diffInMinutes < 5) return { status: 'Active now', color: 'green' };\r\n    if (diffInMinutes < 30) return { status: 'Recently active', color: 'yellow' };\r\n    return { status: 'Inactive', color: 'red' };\r\n  };\r\n\r\n  const handleTerminateSession = async (sessionId, sessionDocId) => {\r\n    setIsTerminating(sessionDocId);\r\n    \r\n    try {\r\n      // Longer delay to show loading state\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      // Add to terminated sessions set to hide it from UI\r\n      setTerminatedSessions(prev => new Set([...prev, sessionDocId]));\r\n      \r\n      // Call the original onTerminateSession if it exists (for actual backend termination)\r\n      if (onTerminateSession && typeof onTerminateSession === 'function') {\r\n        onTerminateSession(sessionId, sessionDocId);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error terminating session:', error);\r\n    } finally {\r\n      setIsTerminating(null);\r\n    }\r\n  };\r\n\r\n  const handleEndAllSessions = async () => {\r\n    setIsEndingAll(true);\r\n    \r\n    try {\r\n      // Longer delay for end all operation\r\n      await new Promise(resolve => setTimeout(resolve, 3000));\r\n      \r\n      // Get all non-current sessions\r\n      const nonCurrentSessions = sessions.filter(session => \r\n        !isCurrentSession(session.sessionId) && !terminatedSessions.has(session.id)\r\n      );\r\n      \r\n      // Add all non-current sessions to terminated set\r\n      const newTerminatedSessions = new Set([\r\n        ...terminatedSessions,\r\n        ...nonCurrentSessions.map(session => session.id)\r\n      ]);\r\n      \r\n      setTerminatedSessions(newTerminatedSessions);\r\n      \r\n      // Call onTerminateSession for each session if it exists\r\n      if (onTerminateSession && typeof onTerminateSession === 'function') {\r\n        nonCurrentSessions.forEach(session => {\r\n          onTerminateSession(session.sessionId, session.id);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error ending all sessions:', error);\r\n    } finally {\r\n      setIsEndingAll(false);\r\n    }\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    // Only reset terminated sessions when explicitly refreshing\r\n    setTerminatedSessions(new Set());\r\n    if (onRefresh && typeof onRefresh === 'function') {\r\n      onRefresh();\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    // Don't reset terminated sessions when modal closes\r\n    // They should stay terminated until page refresh or explicit refresh\r\n    onClose();\r\n  };\r\n\r\n  // Filter out terminated sessions\r\n  const activeSessions = sessions.filter(session => !terminatedSessions.has(session.id));\r\n  \r\n  // Check if there are any non-current sessions that can be terminated\r\n  const hasTerminatableSessions = activeSessions.some(session => \r\n    !isCurrentSession(session.sessionId)\r\n  );\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden\">\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700\">\r\n          <div>\r\n            <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\r\n              Active Sessions\r\n            </h2>\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\r\n              Manage your active sessions across all devices\r\n            </p>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            {hasTerminatableSessions && (\r\n              <button\r\n                onClick={handleEndAllSessions}\r\n                disabled={isEndingAll || isTerminating}\r\n                className={`px-3 py-2 text-sm font-medium border rounded-lg transition-all duration-200 ${\r\n                  isEndingAll || isTerminating\r\n                    ? 'text-gray-400 border-gray-300 cursor-not-allowed bg-gray-50 dark:bg-gray-700'\r\n                    : 'text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 border-red-300 hover:border-red-400 dark:border-red-600 dark:hover:border-red-500 hover:bg-red-50 dark:hover:bg-red-900/20'\r\n                }`}\r\n              >\r\n                {isEndingAll ? (\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <svg className=\"w-4 h-4 animate-spin\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                      <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                      <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n                    </svg>\r\n                    Ending All...\r\n                  </div>\r\n                ) : (\r\n                  'End All'\r\n                )}\r\n              </button>\r\n            )}\r\n            <button\r\n              onClick={handleRefresh}\r\n              disabled={isEndingAll || isTerminating}\r\n              className=\"p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n              title=\"Refresh sessions\"\r\n            >\r\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\r\n              </svg>\r\n            </button>\r\n            <button\r\n              onClick={handleClose}\r\n              disabled={isEndingAll}\r\n              className=\"p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n            >\r\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Content */}\r\n        <div className=\"p-6 overflow-y-auto max-h-[calc(90vh-120px)]\">\r\n          {activeSessions.length === 0 ? (\r\n            <div className=\"text-center py-12\">\r\n              <div className=\"w-16 h-16 mx-auto mb-4 text-gray-400\">\r\n                <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 002 2z\" />\r\n                </svg>\r\n              </div>\r\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\r\n                No Active Sessions\r\n              </h3>\r\n              <p className=\"text-gray-600 dark:text-gray-400\">\r\n                {terminatedSessions.size > 0 \r\n                  ? \"All sessions have been terminated.\" \r\n                  : \"There are currently no active sessions on your account.\"\r\n                }\r\n              </p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-4\">\r\n              {activeSessions.map((session) => {\r\n                const activityStatus = getActivityStatus(session.lastActivity);\r\n                const isCurrent = isCurrentSession(session.sessionId);\r\n                const isBeingTerminated = isTerminating === session.id || isEndingAll;\r\n                \r\n                return (\r\n                  <div\r\n                    key={session.id}\r\n                    className={`p-4 rounded-lg border transition-all duration-500 ${\r\n                      isBeingTerminated \r\n                        ? 'opacity-50 transform scale-95' \r\n                        : 'opacity-100 transform scale-100'\r\n                    } ${\r\n                      isCurrent \r\n                        ? 'border-blue-200 bg-blue-50 dark:border-blue-800 dark:bg-blue-900/20' \r\n                        : 'border-gray-200 bg-gray-50 dark:border-gray-700 dark:bg-gray-800/50'\r\n                    }`}\r\n                  >\r\n                    <div className=\"flex items-start justify-between\">\r\n                      <div className=\"flex items-start space-x-3\">\r\n                        {/* Device Icon */}\r\n                        <div className={`p-2 rounded-lg ${\r\n                          isCurrent ? 'bg-blue-100 text-blue-600 dark:bg-blue-800 dark:text-blue-300' : 'bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-400'\r\n                        }`}>\r\n                          {getDeviceIcon(session.deviceInfo?.deviceType)}\r\n                        </div>\r\n                        \r\n                        {/* Session Details */}\r\n                        <div className=\"flex-1\">\r\n                          <div className=\"flex items-center gap-2 mb-1\">\r\n                            <h3 className=\"font-medium text-gray-900 dark:text-white\">\r\n                              {session.deviceInfo?.deviceType || 'Unknown Device'}\r\n                            </h3>\r\n                            {isCurrent && (\r\n                              <span className=\"px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-200 rounded-full\">\r\n                                Current Session\r\n                              </span>\r\n                            )}\r\n                          </div>\r\n                          \r\n                          <div className=\"space-y-1 text-sm text-gray-600 dark:text-gray-400\">\r\n                            <div className=\"flex items-center gap-2\">\r\n                              <span>{getBrowserIcon(session.deviceInfo?.browser)}</span>\r\n                              <span>{session.deviceInfo?.browser || 'Unknown Browser'}</span>\r\n                              <span>•</span>\r\n                              <span>{session.deviceInfo?.os || 'Unknown OS'}</span>\r\n                            </div>\r\n                            \r\n                            <div className=\"flex items-center gap-2\">\r\n                              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n                              </svg>\r\n                              <span>{getLocationFromIP(session.ipAddress)}</span>\r\n                            </div>\r\n                            \r\n                            <div className=\"flex items-center gap-2\">\r\n                              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                              </svg>\r\n                              <span>Signed in {formatTimeAgo(session.loginTime)}</span>\r\n                            </div>\r\n                            \r\n                            <div className=\"flex items-center gap-2\">\r\n                              <div className={`w-2 h-2 rounded-full ${\r\n                                activityStatus.color === 'green' ? 'bg-green-500' :\r\n                                activityStatus.color === 'yellow' ? 'bg-yellow-500' : 'bg-gray-400'\r\n                              }`} />\r\n                              <span>{activityStatus.status}</span>\r\n                              <span>•</span>\r\n                              <span>Last active {formatTimeAgo(session.lastActivity)}</span>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      {/* Action Button */}\r\n                      {!isCurrent && (\r\n                        <button\r\n                          onClick={() => handleTerminateSession(session.sessionId, session.id)}\r\n                          disabled={isBeingTerminated}\r\n                          className={`px-3 py-1 text-sm font-medium border rounded-lg transition-all duration-200 ${\r\n                            isBeingTerminated\r\n                              ? 'text-gray-400 border-gray-300 cursor-not-allowed'\r\n                              : 'text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 border-red-300 hover:border-red-400 dark:border-red-600 dark:hover:border-red-500 hover:bg-red-50 dark:hover:bg-red-900/20'\r\n                          }`}\r\n                        >\r\n                          {isBeingTerminated ? (\r\n                            <div className=\"flex items-center gap-2\">\r\n                              <svg className=\"w-4 h-4 animate-spin\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n                              </svg>\r\n                              Ending...\r\n                            </div>\r\n                          ) : (\r\n                            'End Session'\r\n                          )}\r\n                        </button>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        {activeSessions.length > 0 && (\r\n          <div className=\"px-6 py-4 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50\">\r\n            <div className=\"flex items-center justify-between text-sm text-gray-600 dark:text-gray-400\">\r\n              <span>\r\n                {activeSessions.length} active session{activeSessions.length !== 1 ? 's' : ''}\r\n                {terminatedSessions.size > 0 && (\r\n                  <span className=\"ml-2 text-green-600 dark:text-green-400\">\r\n                    ({terminatedSessions.size} terminated)\r\n                  </span>\r\n                )}\r\n              </span>\r\n              <span>\r\n                Sessions automatically expire after 1 hour of inactivity\r\n              </span>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActiveSessionsModal;"],"names":["_ref","isOpen","onClose","sessions","currentSessionId","onTerminateSession","onRefresh","terminatedSessions","setTerminatedSessions","useState","Set","isTerminating","setIsTerminating","isEndingAll","setIsEndingAll","formatTimeAgo","date","now","Date","diffInSeconds","Math","floor","concat","getDeviceIcon","deviceType","toLowerCase","_jsx","className","fill","stroke","viewBox","children","strokeLinecap","strokeLinejoin","strokeWidth","d","getBrowserIcon","browser","browserName","includes","isCurrentSession","sessionId","activeSessions","filter","session","has","id","hasTerminatableSessions","some","_jsxs","onClick","async","Promise","resolve","setTimeout","nonCurrentSessions","newTerminatedSessions","map","forEach","error","console","disabled","cx","cy","r","handleRefresh","title","handleClose","length","size","_session$deviceInfo","_session$deviceInfo2","_session$deviceInfo3","_session$deviceInfo4","_session$deviceInfo5","activityStatus","lastActivity","status","color","diffInMinutes","getActivityStatus","isCurrent","isBeingTerminated","deviceInfo","os","ipAddress","loginTime","sessionDocId","prev","handleTerminateSession"],"sourceRoot":""}