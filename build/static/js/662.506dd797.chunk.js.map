{"version":3,"file":"static/js/662.506dd797.chunk.js","mappings":"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","sources":["components/AnalyticsOverview.js"],"sourcesContent":["// File: AnalyticsOverview.jsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport { db } from '../firebase';\r\nimport { collection, query, where, getDocs, Timestamp } from 'firebase/firestore';\r\nimport { Chart, registerables } from 'chart.js';\r\nimport 'chartjs-adapter-date-fns';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { motion } from 'framer-motion';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useAuth } from '../AuthContext';\r\n\r\nChart.register(...registerables);\r\n\r\n// Reusable KPI card component\r\nconst KpiCard = ({ title, value, icon }) => (\r\n  <motion.div\r\n    className=\"bg-white dark:bg-gray-900 p-6 rounded-2xl shadow-lg flex flex-col items-center text-center hover:shadow-2xl transition-shadow\"\r\n    initial={{ opacity: 0, y: 30 }}\r\n    animate={{ opacity: 1, y: 0 }}\r\n    transition={{ duration: 0.5 }}\r\n  >\r\n    {icon && <div className=\"text-4xl mb-2 text-blue-500\">{icon}</div>}\r\n    <h4 className=\"text-lg font-semibold text-gray-700 dark:text-gray-300\">{title}</h4>\r\n    <p className=\"text-3xl font-bold text-green-500 mt-2\">{value}</p>\r\n  </motion.div>\r\n);\r\n\r\n// Fix: Merge time periods correctly in SECONDS\r\nconst mergeTimePeriods = (periods) => {\r\n  if (periods.length === 0) return [];\r\n  const periodsInSeconds = periods.map(p => ({\r\n    start: Math.floor(p.start / 1000),\r\n    end: Math.floor(p.end / 1000),\r\n  }));\r\n  const sorted = periodsInSeconds.sort((a, b) => a.start - b.start);\r\n  const merged = [sorted[0]];\r\n  for (let i = 1; i < sorted.length; i++) {\r\n    const current = sorted[i];\r\n    const last = merged[merged.length - 1];\r\n    if (current.start <= last.end + 1) {\r\n      last.end = Math.max(last.end, current.end);\r\n    } else {\r\n      merged.push(current);\r\n    }\r\n  }\r\n  return merged;\r\n};\r\n\r\nconst calculateTotalUptime = (mergedPeriods) => {\r\n  return mergedPeriods.reduce((total, p) => total + (p.end - p.start), 0);\r\n};\r\n\r\n// Next reset indicator component\r\nconst NextResetIndicator = () => {\r\n  const [timeUntilReset, setTimeUntilReset] = useState('');\r\n  \r\n  const getTimeUntilMidnight = () => {\r\n    const now = new Date();\r\n    const midnight = new Date();\r\n    midnight.setHours(24, 0, 0, 0);\r\n    const diff = midnight.getTime() - now.getTime();\r\n    \r\n    const hours = Math.floor(diff / (1000 * 60 * 60));\r\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n    \r\n    return `${hours}h ${minutes}m`;\r\n  };\r\n  \r\n  useEffect(() => {\r\n    setTimeUntilReset(getTimeUntilMidnight());\r\n    const interval = setInterval(() => {\r\n      setTimeUntilReset(getTimeUntilMidnight());\r\n    }, 60000);\r\n    \r\n    return () => clearInterval(interval);\r\n  }, []);\r\n  \r\n  return (\r\n    <div className=\"text-xs text-gray-400 mt-2 text-center\">\r\n      🌙 Auto-reset in: {timeUntilReset}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function AnalyticsOverview() {\r\n  const [totalSessions, setTotalSessions] = useState(0);\r\n  const [totalScenarios, setTotalScenarios] = useState(0);\r\n  const [dailyUptime, setDailyUptime] = useState(0);\r\n  const [uptimeHistory, setUptimeHistory] = useState([]);\r\n  const [sessionActive, setSessionActive] = useState(false);\r\n  const [uptimePeriods, setUptimePeriods] = useState([]);\r\n  const [lastUpdateTime, setLastUpdateTime] = useState(Date.now());\r\n  const { user } = useAuth();\r\n  const todayKey = new Date().toISOString().split('T')[0];\r\n\r\n  const formatUptime = (seconds) => {\r\n    const h = Math.floor(seconds / 3600);\r\n    const m = Math.floor((seconds % 3600) / 60);\r\n    const s = seconds % 60;\r\n    return `${h}h ${m}m ${s}s`;\r\n  };\r\n\r\n  const clearTodaysData = () => {\r\n    localStorage.removeItem(`uptimePeriods_${todayKey}`);\r\n    localStorage.removeItem(`sessionCount_${todayKey}`);\r\n    localStorage.removeItem('sessionStart');\r\n    localStorage.removeItem('sessionActive');\r\n    \r\n    // Reset state\r\n    setTotalSessions(0);\r\n    setTotalScenarios(0);\r\n    setDailyUptime(0);\r\n    setUptimeHistory([]);\r\n    setSessionActive(false);\r\n    setUptimePeriods([]);\r\n    \r\n    // Start fresh session\r\n    startSession();\r\n  };\r\n\r\n  const loadLocalUptime = () => {\r\n    const stored = localStorage.getItem(`uptimePeriods_${todayKey}`);\r\n    if (stored) {\r\n      try {\r\n        const parsed = JSON.parse(stored);\r\n        setUptimePeriods(parsed);\r\n        const merged = mergeTimePeriods(parsed);\r\n        const totalSeconds = calculateTotalUptime(merged);\r\n        setDailyUptime(totalSeconds);\r\n        const sessionCount = parseInt(localStorage.getItem(`sessionCount_${todayKey}`) || '0', 10);\r\n        setTotalSessions(sessionCount);\r\n        return parsed;\r\n      } catch (e) {\r\n        console.error('Error loading uptime:', e);\r\n        setUptimePeriods([]);\r\n        return [];\r\n      }\r\n    }\r\n    return [];\r\n  };\r\n\r\n  const saveSessionPeriod = (start, end) => {\r\n    const stored = localStorage.getItem(`uptimePeriods_${todayKey}`);\r\n    let periods = [];\r\n    if (stored) {\r\n      try {\r\n        periods = JSON.parse(stored);\r\n      } catch (e) {\r\n        console.error('Parsing error:', e);\r\n      }\r\n    }\r\n    periods.push({ start, end });\r\n    localStorage.setItem(`uptimePeriods_${todayKey}`, JSON.stringify(periods));\r\n    const count = parseInt(localStorage.getItem(`sessionCount_${todayKey}`) || '0', 10);\r\n    localStorage.setItem(`sessionCount_${todayKey}`, (count + 1).toString());\r\n    return periods;\r\n  };\r\n\r\n  const startSession = () => {\r\n    if (!sessionActive) {\r\n      localStorage.setItem('sessionStart', Date.now());\r\n      localStorage.setItem('sessionActive', 'true');\r\n      setSessionActive(true);\r\n    }\r\n  };\r\n\r\n  // 🌙 AUTOMATIC MIDNIGHT RESET SYSTEM\r\n  useEffect(() => {\r\n    let lastKnownDate = new Date().toISOString().split('T')[0];\r\n    \r\n    const checkForDayChange = () => {\r\n      const currentDate = new Date().toISOString().split('T')[0];\r\n      \r\n      if (currentDate !== lastKnownDate) {\r\n        console.log(`🔄 Day changed from ${lastKnownDate} to ${currentDate}`);\r\n        \r\n        // Clear previous day's data\r\n        localStorage.removeItem(`uptimePeriods_${lastKnownDate}`);\r\n        localStorage.removeItem(`sessionCount_${lastKnownDate}`);\r\n        localStorage.removeItem('sessionStart');\r\n        localStorage.removeItem('sessionActive');\r\n        \r\n        // Reset component state\r\n        setTotalSessions(0);\r\n        setTotalScenarios(0);\r\n        setDailyUptime(0);\r\n        setUptimeHistory([]);\r\n        setSessionActive(false);\r\n        setUptimePeriods([]);\r\n        \r\n        lastKnownDate = currentDate;\r\n        \r\n        // Start fresh session for new day\r\n        setTimeout(() => startSession(), 100);\r\n      }\r\n    };\r\n\r\n    // Calculate milliseconds until next midnight\r\n    const getMsUntilMidnight = () => {\r\n      const now = new Date();\r\n      const midnight = new Date();\r\n      midnight.setHours(24, 0, 0, 0);\r\n      return midnight.getTime() - now.getTime();\r\n    };\r\n\r\n    // Set up midnight timer\r\n    const scheduleNextMidnightReset = () => {\r\n      const msUntilMidnight = getMsUntilMidnight();\r\n      \r\n      const midnightTimeout = setTimeout(() => {\r\n        console.log('🌅 Midnight reset triggered');\r\n        clearTodaysData();\r\n        scheduleNextMidnightReset(); // Schedule next day\r\n      }, msUntilMidnight);\r\n      \r\n      console.log(`⏰ Midnight reset scheduled in ${Math.round(msUntilMidnight / 1000 / 60)} minutes`);\r\n      \r\n      return midnightTimeout;\r\n    };\r\n\r\n    // Check every minute for day changes (handles edge cases)\r\n    const dayChangeInterval = setInterval(checkForDayChange, 60000);\r\n    \r\n    // Handle page visibility changes\r\n    const handleVisibilityChange = () => {\r\n      if (!document.hidden) {\r\n        checkForDayChange();\r\n      }\r\n    };\r\n    \r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    \r\n    // Initial check and schedule\r\n    checkForDayChange();\r\n    const midnightTimeout = scheduleNextMidnightReset();\r\n    \r\n    // Cleanup\r\n    return () => {\r\n      clearInterval(dayChangeInterval);\r\n      clearTimeout(midnightTimeout);\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n    };\r\n  }, []); // Only run once on mount\r\n\r\n  useEffect(() => {\r\n    const active = localStorage.getItem('sessionActive') === 'true';\r\n    setSessionActive(active);\r\n    loadLocalUptime();\r\n    if (!active) startSession();\r\n  }, [todayKey]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (sessionActive) {\r\n        const start = parseInt(localStorage.getItem('sessionStart'), 10);\r\n        if (start) {\r\n          const stored = localStorage.getItem(`uptimePeriods_${todayKey}`);\r\n          let periods = [];\r\n          if (stored) {\r\n            try {\r\n              periods = JSON.parse(stored);\r\n            } catch {}\r\n          }\r\n          const now = Date.now();\r\n          const allPeriods = [...periods, { start, end: now }];\r\n          const merged = mergeTimePeriods(allPeriods);\r\n          const currentUptime = calculateTotalUptime(merged);\r\n          setDailyUptime(currentUptime);\r\n          \r\n          // Update last update time\r\n          setLastUpdateTime(now);\r\n        }\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [sessionActive, todayKey]);\r\n\r\n  // Enhanced chart update effect - updates every minute\r\n  useEffect(() => {\r\n    const chartInterval = setInterval(() => {\r\n      if (sessionActive) {\r\n        const now = new Date();\r\n        const timeStr = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n        const uptimeMinutes = Math.floor(dailyUptime / 60);\r\n        \r\n        setUptimeHistory(prev => {\r\n          const newHistory = [...prev, {\r\n            time: timeStr,\r\n            uptime: uptimeMinutes,\r\n            timestamp: now.getTime()\r\n          }];\r\n          \r\n          // Keep only last 60 data points (1 hour of data)\r\n          return newHistory.slice(-60);\r\n        });\r\n      }\r\n    }, 60000); // Update every minute\r\n\r\n    return () => clearInterval(chartInterval);\r\n  }, [sessionActive, dailyUptime]);\r\n\r\n  useEffect(() => {\r\n    const onHidden = () => {\r\n      if (document.hidden && sessionActive) {\r\n        const start = parseInt(localStorage.getItem('sessionStart'), 10);\r\n        if (start) {\r\n          saveSessionPeriod(start, Date.now());\r\n          localStorage.setItem('sessionActive', 'false');\r\n          setSessionActive(false);\r\n          loadLocalUptime();\r\n        }\r\n      } else if (!document.hidden && !sessionActive) {\r\n        startSession();\r\n      }\r\n    };\r\n    const beforeUnload = () => {\r\n      if (sessionActive) {\r\n        const start = parseInt(localStorage.getItem('sessionStart'), 10);\r\n        if (start) saveSessionPeriod(start, Date.now());\r\n        localStorage.setItem('sessionActive', 'false');\r\n      }\r\n    };\r\n\r\n    document.addEventListener('visibilitychange', onHidden);\r\n    window.addEventListener('beforeunload', beforeUnload);\r\n    return () => {\r\n      document.removeEventListener('visibilitychange', onHidden);\r\n      window.removeEventListener('beforeunload', beforeUnload);\r\n    };\r\n  }, [sessionActive, todayKey]);\r\n\r\n  useEffect(() => {\r\n    if (!user) return;\r\n    const fetch = async () => {\r\n      try {\r\n        const userId = user.uid;\r\n        const today = new Date();\r\n        const start = new Date(today.setHours(0, 0, 0, 0));\r\n        const end = new Date(today.setHours(23, 59, 59, 999));\r\n        const q = query(\r\n          collection(db, 'userInteractions'),\r\n          where('userId', '==', userId),\r\n          where('action', '==', 'simulate_scenario'),\r\n          where('timestamp', '>=', Timestamp.fromDate(start)),\r\n          where('timestamp', '<=', Timestamp.fromDate(end))\r\n        );\r\n        const snap = await getDocs(q);\r\n        setTotalScenarios(snap.size);\r\n      } catch (e) {\r\n        console.error(\"Fetch error:\", e);\r\n      }\r\n    };\r\n    fetch();\r\n  }, [user]);\r\n\r\n  // Modern chart styling with gradient and improved visuals\r\n  const chartData = {\r\n    labels: uptimeHistory.map(e => e.time),\r\n    datasets: [{\r\n      label: 'Uptime (minutes)',\r\n      data: uptimeHistory.map(e => e.uptime),\r\n      borderColor: '#06b6d4',\r\n      backgroundColor: (context) => {\r\n        const chart = context.chart;\r\n        const { ctx, chartArea } = chart;\r\n        if (!chartArea) return null;\r\n        \r\n        const gradient = ctx.createLinearGradient(0, chartArea.top, 0, chartArea.bottom);\r\n        gradient.addColorStop(0, 'rgba(6, 182, 212, 0.3)');\r\n        gradient.addColorStop(0.5, 'rgba(6, 182, 212, 0.1)');\r\n        gradient.addColorStop(1, 'rgba(6, 182, 212, 0.05)');\r\n        return gradient;\r\n      },\r\n      borderWidth: 3,\r\n      tension: 0.4,\r\n      fill: true,\r\n      pointRadius: 6,\r\n      pointHoverRadius: 8,\r\n      pointBackgroundColor: '#06b6d4',\r\n      pointBorderColor: '#ffffff',\r\n      pointBorderWidth: 2,\r\n      pointHoverBackgroundColor: '#0891b2',\r\n      pointHoverBorderColor: '#ffffff',\r\n      pointHoverBorderWidth: 3,\r\n      shadowColor: 'rgba(6, 182, 212, 0.3)',\r\n      shadowBlur: 10,\r\n      shadowOffsetX: 0,\r\n      shadowOffsetY: 4,\r\n    }],\r\n  };\r\n\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    interaction: {\r\n      intersect: false,\r\n      mode: 'index',\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        display: true,\r\n        position: 'top',\r\n        labels: {\r\n          color: '#6b7280',\r\n          font: {\r\n            size: 14,\r\n            weight: '500'\r\n          },\r\n          usePointStyle: true,\r\n          pointStyle: 'circle',\r\n          padding: 20,\r\n        }\r\n      },\r\n      tooltip: {\r\n        backgroundColor: 'rgba(17, 24, 39, 0.95)',\r\n        titleColor: '#f9fafb',\r\n        bodyColor: '#f9fafb',\r\n        borderColor: '#06b6d4',\r\n        borderWidth: 1,\r\n        cornerRadius: 12,\r\n        displayColors: false,\r\n        titleFont: {\r\n          size: 14,\r\n          weight: '600'\r\n        },\r\n        bodyFont: {\r\n          size: 13,\r\n          weight: '400'\r\n        },\r\n        padding: 12,\r\n        callbacks: {\r\n          title: (context) => `Time: ${context[0].label}`,\r\n          label: (context) => `Uptime: ${context.parsed.y} minutes`,\r\n        }\r\n      }\r\n    },\r\n    scales: {\r\n      x: {\r\n        display: true,\r\n        title: {\r\n          display: true,\r\n          text: 'Time',\r\n          color: '#6b7280',\r\n          font: {\r\n            size: 13,\r\n            weight: '500'\r\n          }\r\n        },\r\n        ticks: {\r\n          color: '#9ca3af',\r\n          font: {\r\n            size: 12\r\n          },\r\n          maxTicksLimit: 10,\r\n        },\r\n        grid: {\r\n          color: 'rgba(156, 163, 175, 0.1)',\r\n          borderDash: [3, 3],\r\n        },\r\n        border: {\r\n          color: 'rgba(156, 163, 175, 0.2)',\r\n        }\r\n      },\r\n      y: {\r\n        display: true,\r\n        title: {\r\n          display: true,\r\n          text: 'Minutes',\r\n          color: '#6b7280',\r\n          font: {\r\n            size: 13,\r\n            weight: '500'\r\n          }\r\n        },\r\n        beginAtZero: true,\r\n        ticks: {\r\n          color: '#9ca3af',\r\n          font: {\r\n            size: 12\r\n          },\r\n          callback: (value) => `${value}m`\r\n        },\r\n        grid: {\r\n          color: 'rgba(156, 163, 175, 0.1)',\r\n          borderDash: [3, 3],\r\n        },\r\n        border: {\r\n          color: 'rgba(156, 163, 175, 0.2)',\r\n        }\r\n      }\r\n    },\r\n    elements: {\r\n      line: {\r\n        tension: 0.4\r\n      }\r\n    },\r\n    animation: {\r\n      duration: 1000,\r\n      easing: 'easeInOutQuart',\r\n    }\r\n  };\r\n\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <div className=\"p-6 bg-gray-50 dark:bg-gray-800 min-h-screen\">\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-10\">\r\n        <KpiCard title=\"Total Sessions Today\" value={totalSessions} icon={<i className=\"fas fa-history\" />} />\r\n        <KpiCard title=\"Scenarios Run Today\" value={totalScenarios} icon={<i className=\"fas fa-tasks\" />} />\r\n        <KpiCard title=\"Total Uptime Today\" value={formatUptime(dailyUptime)} icon={<i className=\"fas fa-clock\" />} />\r\n      </div>\r\n\r\n      <motion.div \r\n        className=\"p-8 rounded-3xl bg-white dark:bg-gray-900 shadow-xl border border-gray-100 dark:border-gray-700\"\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        transition={{ duration: 0.6 }}\r\n      >\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <div className=\"flex items-center gap-3\">\r\n            <div className=\"w-3 h-3 bg-emerald-500 rounded-full animate-pulse\"></div>\r\n            <h2 className=\"text-2xl font-bold text-gray-800 dark:text-white\">\r\n              📈 Live Uptime Trend\r\n            </h2>\r\n          </div>\r\n          <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n            Last updated: {new Date(lastUpdateTime).toLocaleTimeString()}\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"h-96 relative\">\r\n          <Line data={chartData} options={chartOptions} />\r\n        </div>\r\n        \r\n        <div className=\"mt-6 text-center\">\r\n          <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-2\">\r\n            📊 Updates every minute • {uptimeHistory.length} data points • Session: {sessionActive ? '🟢 Active' : '🔴 Inactive'}\r\n          </p>\r\n          <div className=\"flex justify-center gap-6 text-xs text-gray-400\">\r\n            <span>🔄 Auto-refresh: 1min</span>\r\n            <span>📈 Chart history: 1hr</span>\r\n            <span>💾 Data retention: 24hr</span>\r\n          </div>\r\n        </div>\r\n        \r\n        <NextResetIndicator />\r\n      </motion.div>\r\n\r\n      <div className=\"mt-10 text-center\">\r\n        <p className=\"text-gray-500 mb-2\">Click to view full analytics</p>\r\n        <motion.button\r\n          whileTap={{ scale: 0.95 }}\r\n          whileHover={{ scale: 1.05 }}\r\n          onClick={() => navigate('/analytics')}\r\n          className=\"px-6 py-3 bg-yellow-400 dark:bg-yellow-500 text-black dark:text-white rounded-xl shadow hover:bg-yellow-500 dark:hover:bg-yellow-600 transition\"\r\n        >\r\n          📊 View Full Analytics\r\n        </motion.button>\r\n        <br />\r\n        <button onClick={clearTodaysData} className=\"mt-4 text-xs underline text-red-500\">\r\n          Clear Today's Data (Manual)\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":["Chart","register","registerables","KpiCard","_ref","title","value","icon","_jsxs","motion","div","className","initial","opacity","y","animate","transition","duration","children","_jsx","mergeTimePeriods","periods","length","sorted","map","p","start","Math","floor","end","sort","a","b","merged","i","current","last","max","push","calculateTotalUptime","mergedPeriods","reduce","total","NextResetIndicator","timeUntilReset","setTimeUntilReset","useState","getTimeUntilMidnight","now","Date","midnight","setHours","diff","getTime","hours","minutes","concat","useEffect","interval","setInterval","clearInterval","AnalyticsOverview","totalSessions","setTotalSessions","totalScenarios","setTotalScenarios","dailyUptime","setDailyUptime","uptimeHistory","setUptimeHistory","sessionActive","setSessionActive","uptimePeriods","setUptimePeriods","lastUpdateTime","setLastUpdateTime","user","useAuth","todayKey","toISOString","split","clearTodaysData","localStorage","removeItem","startSession","loadLocalUptime","stored","getItem","parsed","JSON","parse","totalSeconds","sessionCount","parseInt","e","console","error","saveSessionPeriod","setItem","stringify","count","toString","lastKnownDate","checkForDayChange","currentDate","log","setTimeout","scheduleNextMidnightReset","msUntilMidnight","getMsUntilMidnight","midnightTimeout","round","dayChangeInterval","handleVisibilityChange","document","hidden","addEventListener","clearTimeout","removeEventListener","active","_unused","allPeriods","currentUptime","chartInterval","timeStr","toLocaleTimeString","hour","minute","uptimeMinutes","prev","time","uptime","timestamp","slice","onHidden","beforeUnload","window","async","userId","uid","today","q","query","collection","db","where","Timestamp","fromDate","snap","getDocs","size","fetch","chartData","labels","datasets","label","data","borderColor","backgroundColor","context","chart","ctx","chartArea","gradient","createLinearGradient","top","bottom","addColorStop","borderWidth","tension","fill","pointRadius","pointHoverRadius","pointBackgroundColor","pointBorderColor","pointBorderWidth","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","navigate","useNavigate","seconds","h","m","s","formatUptime","Line","options","responsive","maintainAspectRatio","interaction","intersect","mode","plugins","legend","display","position","color","font","weight","usePointStyle","pointStyle","padding","tooltip","titleColor","bodyColor","cornerRadius","displayColors","titleFont","bodyFont","callbacks","scales","x","text","ticks","maxTicksLimit","grid","borderDash","border","beginAtZero","callback","elements","line","animation","easing","button","whileTap","scale","whileHover","onClick"],"sourceRoot":""}